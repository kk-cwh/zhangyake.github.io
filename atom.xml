<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>THIS SPACE</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhangyake.github.io/"/>
  <updated>2017-07-28T02:24:11.584Z</updated>
  <id>http://zhangyake.github.io/</id>
  
  <author>
    <name>jaak</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信自动回复，所有好友头像合成。。。</title>
    <link href="http://zhangyake.github.io/2017/07/26/itchat-python/"/>
    <id>http://zhangyake.github.io/2017/07/26/itchat-python/</id>
    <published>2017-07-26T03:14:57.000Z</published>
    <updated>2017-07-28T02:24:11.584Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/337803-ada279ae9405b7dd.gif?imageMogr2/auto-orient/strip" alt="all_friend.gif"></p>
<p>基于<a href="http://itchat.readthedocs.io/zh/latest" target="_blank" rel="external">itchat</a> 的python微信个人项目 <a href="https://github.com/zhangyake/python-itchat" target="_blank" rel="external">https://github.com/zhangyake/python-itchat</a><br><strong>目前实现功能</strong></p>
<ul>
<li>图灵机器人自动回复文本信息 msg</li>
<li>随机回复图片信息 随机图片放在gif目录中</li>
<li>获取所有好友头像 合成为一张大图 </li>
<li>获取所有好友基本信息比如昵称 备注 性别 个性签名等 存放在数据库表中</li>
<li>下载用户发送的图片 附件 录音 视频文件 （<a href="http://itchat.readthedocs.io/zh/latest" target="_blank" rel="external">itchat</a> 存在问题,存在下载失败的情况）</li>
</ul>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p><a href="https://github.com/zhangyake/python-itchat" target="_blank" rel="external">项目</a>主要文件是 gif 文件夹 和 weixin.py 下载这两个到本地电脑</p>
<p>1 .  安装<a href="https://www.python.org/downloads/" target="_blank" rel="external">pyhton3</a>最新版 安装时请加入到系统环境变量</p>
<p>2 .  安装一个第三方库——Python Imaging Library </p>
<pre><code>pip install Pillow
</code></pre><p>3 . 安装一个pymysql</p>
<pre><code>pip install pymysql 
</code></pre><p>4 . 安装 <a href="http://itchat.readthedocs.io/zh/latest" target="_blank" rel="external">itchat</a> 库 </p>
<pre><code>pip install itchat
</code></pre><p>5 . 修改 weixin.py 113行key  请自行到<a href="http://www.tuling123.com" target="_blank" rel="external">图灵机器人官网</a>申请key</p>
<p>   网址  <a href="http://www.tuling123.com" target="_blank" rel="external">http://www.tuling123.com</a></p>
<p>6 . 修改数据库配置 weixin.py 167行 改为自己的 执行建表语句</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`friends`</span> (</div><div class="line">   <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">   <span class="string">`NickName`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>,</div><div class="line">   <span class="string">`PYInitial`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">   <span class="string">`PYQuanPin`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">   <span class="string">`RemarkName`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'备注'</span>,</div><div class="line">   <span class="string">`RemarkPYInitial`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">   <span class="string">`RemarkPYQuanPin`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</div><div class="line">   <span class="string">`Sex`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'性别 1 男 2 女'</span>,</div><div class="line">   <span class="string">`Province`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'省'</span>,</div><div class="line">   <span class="string">`City`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'城市'</span>,</div><div class="line">   <span class="string">`Signature`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'个人签名'</span>,</div><div class="line">   PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line"> ) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</div></pre></td></tr></table></figure>
<p>7 .  到当前目录命令行执行 </p>
<pre><code>python weixin.py
</code></pre><p>   手机微信扫描登录</p>
<h4 id="获取到的用户信息展示"><a href="#获取到的用户信息展示" class="headerlink" title="获取到的用户信息展示"></a>获取到的用户信息展示</h4><p><img src="http://upload-images.jianshu.io/upload_images/337803-7bb831c26dab391d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="9A~XW9$_S@IV]N}WM}WXK8X.png"></p>
<h4 id="自动回复信息展示"><a href="#自动回复信息展示" class="headerlink" title="自动回复信息展示"></a>自动回复信息展示</h4><p><img src="http://upload-images.jianshu.io/upload_images/337803-909745c3652969a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h4 id="直接上代码，写的不好-随意喷"><a href="#直接上代码，写的不好-随意喷" class="headerlink" title="直接上代码，写的不好 随意喷"></a>直接上代码，写的不好 随意喷</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">import</span> itchat</div><div class="line"><span class="keyword">from</span> itchat.content <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> pymysql</div><div class="line"></div><div class="line"># 设置自动回复的人字典 valus为 <span class="literal">True</span> 为自动回复，<span class="literal">False</span> 则不自动回复 ,未添加进来的 也不会自动回复</div><div class="line"># key值为好友的昵称的 汉语拼音，如果用户昵称中有其他字符 请登录后 在数据库中查看</div><div class="line">autoDict = &#123;<span class="string">'Caroline'</span>: <span class="literal">True</span>,  <span class="string">'tiankongzhicheng'</span>: <span class="literal">True</span>&#125;</div><div class="line">autoUserNames = &#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line"># 通过下面的方式进行简单配置输出方式与日志级别</div><div class="line">logging.basicConfig(filename=<span class="string">'logger.log'</span>, level=logging.INFO)</div><div class="line"></div><div class="line"># 注册地图 名片 通知 分享信息 回复方法 </div><div class="line">@itchat.msg_register([MAP, CARD, NOTE, SHARING])</div><div class="line">def text_reply(msg):</div><div class="line">    # print(msg) 这里没有自动回复 对信息进行了日志记录</div><div class="line">    <span class="keyword">if</span> autoUserNames.get(msg[<span class="string">'FromUserName'</span>]):</div><div class="line">        info = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S "</span>, time.localtime()) + \</div><div class="line">            autoUserNames[msg[<span class="string">'FromUserName'</span>]] + <span class="string">" : "</span> + \</div><div class="line">            str(msg[<span class="string">'Text'</span>]) + msg.get(<span class="string">'Url'</span>, <span class="string">''</span>) + <span class="string">"\n"</span></div><div class="line">        <span class="keyword">with</span> open(<span class="string">'msg.info'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(info)</div><div class="line">        # logging.info(info) </div><div class="line"></div><div class="line"></div><div class="line"># 注册文本信息 回复方法</div><div class="line">@itchat.msg_register(TEXT)</div><div class="line">def text_reply(msg):</div><div class="line">    <span class="keyword">if</span> autoUserNames.get(msg[<span class="string">'FromUserName'</span>]):</div><div class="line">        info = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S "</span>, time.localtime()) + \</div><div class="line">            autoUserNames[msg[<span class="string">'FromUserName'</span>]] + <span class="string">" : "</span> + \</div><div class="line">            str(msg[<span class="string">'Text'</span>]) + msg.get(<span class="string">'Url'</span>, <span class="string">''</span>) + <span class="string">"\n"</span></div><div class="line">        #对信息进行了日志记录 写入了文本</div><div class="line">        <span class="keyword">with</span> open(<span class="string">'msg.info'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(info)</div><div class="line">        text = request_robot(info=msg[<span class="string">'Text'</span>], userid=msg[<span class="string">'FromUserName'</span>])</div><div class="line">        itchat.send(text, msg[<span class="string">'FromUserName'</span>])</div><div class="line"></div><div class="line"></div><div class="line"># 在注册时增加isGroupChat=<span class="literal">True</span>将判定为群聊回复</div><div class="line">@itchat.msg_register(TEXT, isGroupChat=<span class="literal">True</span>)</div><div class="line">def groupchat_reply(msg):</div><div class="line">    <span class="keyword">if</span> not msg[<span class="string">'IsAt'</span>] :</div><div class="line">        # 请求图灵机器人 获取要回复的内容</div><div class="line">        text = request_robot(info=msg[<span class="string">'Text'</span>], userid=msg[<span class="string">'FromUserName'</span>])</div><div class="line">        # 发送到群里</div><div class="line">        itchat.send(text, msg[<span class="string">'FromUserName'</span>])</div><div class="line"></div><div class="line"></div><div class="line"># 在注册 图片 附件 语音 视频 信息 下载方法</div><div class="line">@itchat.msg_register([PICTURE, RECORDING, ATTACHMENT, VIDEO])</div><div class="line">def download_files(msg):</div><div class="line">    msg[<span class="string">'Text'</span>](msg[<span class="string">'FileName'</span>]) #下载文件</div><div class="line">    <span class="keyword">if</span> autoUserNames.get(msg[<span class="string">'FromUserName'</span>]):</div><div class="line">        fileName = os.path.join(<span class="string">'gif'</span>, <span class="string">'&#123;&#125;.gif'</span>.format(random.randint(<span class="number">1</span>, <span class="number">25</span>)))</div><div class="line">        file = <span class="string">'@&#123;&#125;@&#123;&#125;'</span>.format(&#123;<span class="string">'Picture'</span>: <span class="string">'img'</span>, <span class="string">'Video'</span>: <span class="string">'vid'</span>&#125;.get(</div><div class="line">            msg[<span class="string">'Type'</span>], <span class="string">'fil'</span>), fileName)</div><div class="line">        <span class="keyword">if</span> msg[<span class="string">'Type'</span>] == <span class="string">'Picture'</span>:</div><div class="line">            itchat.send(file, msg[<span class="string">'FromUserName'</span>])</div><div class="line"></div><div class="line"></div><div class="line"># 拼接合成好友头像</div><div class="line">def make_all_friends_img(image_list, width=<span class="number">120</span>, height=<span class="number">120</span>, save_name=<span class="string">'all_friend.jpg'</span>):</div><div class="line">    images_count = len(image_list)</div><div class="line">    n = int(math.ceil(pow(images_count, <span class="number">0.5</span>)))</div><div class="line">    toImage = Image.new(<span class="string">'RGBA'</span>, (width * n, height * n), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</div><div class="line">    for y <span class="keyword">in</span> range(<span class="number">0</span>, n):</div><div class="line">        for x <span class="keyword">in</span> range(<span class="number">0</span>, n):</div><div class="line">            print(x * width, y * height)</div><div class="line">            try:</div><div class="line">                fromImage = Image.open(image_list.pop())</div><div class="line">                fromImage = fromImage.resize((width, height), Image.ANTIALIAS)</div><div class="line">                toImage.paste(fromImage, (x * width, y * height))</div><div class="line">            except Exception <span class="keyword">as</span> e:</div><div class="line">                print(<span class="string">'某头像图片有误'</span>)</div><div class="line">            <span class="keyword">if</span> len(image_list) == <span class="number">0</span>:</div><div class="line">                toImage.save(save_name)</div><div class="line">                print(<span class="string">'合成图像success'</span>)</div><div class="line">                return</div><div class="line"></div><div class="line"></div><div class="line"># 获取所以好友头像</div><div class="line">def get_all_friends_img(picDir=<span class="string">'friends'</span>):</div><div class="line">    images = []</div><div class="line">    <span class="keyword">if</span> not os.path.isdir(picDir):</div><div class="line">        os.makedirs(picDir)</div><div class="line">    for i, friend <span class="keyword">in</span> enumerate(itchat.get_friends()):</div><div class="line">        itchat.get_head_img(userName=friend[<span class="string">'UserName'</span>], picDir=os.path.join(picDir, str(i)+<span class="string">'.png'</span>))</div><div class="line">        images.append(os.path.join(picDir, str(i)+<span class="string">'.png'</span>))</div><div class="line">    return images </div><div class="line"></div><div class="line">codes_map = &#123;</div><div class="line">    <span class="number">100000</span>: <span class="literal">True</span>,  # <span class="string">'文本类'</span></div><div class="line">    <span class="number">200000</span>: <span class="literal">True</span>,  # <span class="string">'链接类'</span></div><div class="line">    <span class="number">302000</span>: <span class="literal">True</span>,  # <span class="string">'新闻类'</span></div><div class="line">    <span class="number">308000</span>: <span class="literal">True</span>,  # <span class="string">'菜谱类'</span></div><div class="line">    <span class="number">40001</span>: <span class="literal">True</span>,  # <span class="string">'参数 key 错误'</span></div><div class="line">    <span class="number">40002</span>: <span class="literal">True</span>,  # <span class="string">'请求内容 info 为空'</span></div><div class="line">    <span class="number">40004</span>: <span class="literal">True</span>,  # <span class="string">'当天请求次数已使用完'</span></div><div class="line">    <span class="number">40007</span>: <span class="literal">True</span>,  # <span class="string">'数据格式异常'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"># 向图灵机器人发送请求 获取结果</div><div class="line">def request_robot(info=<span class="string">'hello'</span>, userid=<span class="string">'123456'</span>, url=<span class="string">'http://www.tuling123.com/openapi/api'</span>, key=<span class="string">'d0ee53f65c46a4206a5b049f1eda674c8'</span>):</div><div class="line">    res = requests.post(url, json=&#123;<span class="string">'key'</span>: key, <span class="string">'userid'</span>: userid, <span class="string">'info'</span>: info&#125;)</div><div class="line">    <span class="keyword">if</span> res.status_code == <span class="number">200</span>:</div><div class="line">        data = res.json()</div><div class="line">        return response_handle(**data)</div><div class="line">    else:</div><div class="line">        return <span class="string">'抱歉,稍等。。。'</span></div><div class="line"></div><div class="line"></div><div class="line"># 处理机器人返回的数据</div><div class="line">def response_handle(**kw):</div><div class="line">    <span class="keyword">code</span> = kw.get(<span class="string">'code'</span>, <span class="number">40004</span>)</div><div class="line">    res_str = <span class="string">''</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">code</span> == <span class="number">100000</span> or <span class="keyword">code</span> == <span class="number">200000</span>:</div><div class="line">        res_str = kw.get(<span class="string">'text'</span>, <span class="string">''</span>) + kw.get(<span class="string">'url'</span>, <span class="string">''</span>)</div><div class="line">    elif <span class="keyword">code</span> == <span class="number">302000</span>:</div><div class="line">        news = kw.get(<span class="string">'list'</span>)</div><div class="line">        <span class="keyword">if</span> isinstance(news, Iterable):</div><div class="line">            for nw <span class="keyword">in</span> news:</div><div class="line">                res_str += (nw.get(<span class="string">'article'</span>, <span class="string">''</span>) + <span class="string">'\n'</span> +</div><div class="line">                            nw.get(<span class="string">'detailurl'</span>, <span class="string">''</span>) + <span class="string">'\n'</span>)</div><div class="line">    elif <span class="keyword">code</span> == <span class="number">308000</span>:</div><div class="line">        news = kw.get(<span class="string">'list'</span>)</div><div class="line">        <span class="keyword">if</span> isinstance(news, Iterable):</div><div class="line">            for nw <span class="keyword">in</span> news:</div><div class="line">                res_str += (nw.get(<span class="string">'name'</span>, <span class="string">''</span>) + <span class="string">'\n'</span> +</div><div class="line">                            nw.get(<span class="string">'detailurl'</span>, <span class="string">''</span>) + <span class="string">'\n'</span>)</div><div class="line">    else:</div><div class="line">        res_str = kw.get(<span class="string">'text'</span>, <span class="string">''</span>)</div><div class="line"></div><div class="line">    return res_str</div><div class="line"></div><div class="line"></div><div class="line">def get_rooms_info():</div><div class="line">    for i, friend <span class="keyword">in</span> enumerate(itchat.get_chatrooms()):</div><div class="line">        logging.info(str(friend))</div><div class="line"></div><div class="line"># 添加用户到数据库 这里(host=<span class="string">'192.168.10.10'</span>,user=<span class="string">'homestead'</span>,password=<span class="string">'secret'</span>,db=<span class="string">'test'</span>,charset=<span class="string">'utf8mb4'</span>) 请更改为自己的数据库账户密码</div><div class="line"># 建表语句</div><div class="line">#  CREATE TABLE `friends` (</div><div class="line">#   `id` int(<span class="number">11</span>) NOT NULL AUTO_INCREMENT,</div><div class="line">#   `NickName` varchar(<span class="number">255</span>) DEFAULT NULL COMMENT <span class="string">'昵称'</span>,</div><div class="line">#   `PYInitial` varchar(<span class="number">255</span>) DEFAULT NULL,</div><div class="line">#   `PYQuanPin` varchar(<span class="number">255</span>) DEFAULT NULL,</div><div class="line">#   `RemarkName` varchar(<span class="number">255</span>) DEFAULT NULL COMMENT <span class="string">'备注'</span>,</div><div class="line">#   `RemarkPYInitial` varchar(<span class="number">255</span>) DEFAULT NULL,</div><div class="line">#   `RemarkPYQuanPin` varchar(<span class="number">255</span>) DEFAULT NULL,</div><div class="line">#   `Sex` varchar(<span class="number">255</span>) DEFAULT NULL COMMENT <span class="string">'性别 1 男 2 女'</span>,</div><div class="line">#   `Province` varchar(<span class="number">255</span>) DEFAULT NULL COMMENT <span class="string">'省'</span>,</div><div class="line">#   `City` varchar(<span class="number">255</span>) DEFAULT NULL COMMENT <span class="string">'城市'</span>,</div><div class="line">#   `Signature` varchar(<span class="number">255</span>) DEFAULT NULL COMMENT <span class="string">'个人签名'</span>,</div><div class="line">#   PRIMARY KEY (`id`)</div><div class="line"># ) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">1</span> DEFAULT CHARSET=utf8mb4;</div><div class="line">def add_to_db(**kw):</div><div class="line">    connection = pymysql.connect(host=<span class="string">'192.168.10.10'</span>,user=<span class="string">'homestead'</span>,password=<span class="string">'secret'</span>,db=<span class="string">'test'</span>,charset=<span class="string">'utf8mb4'</span>)</div><div class="line">    try:</div><div class="line">        <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</div><div class="line">            sql = <span class="string">"INSERT INTO `friends` ( `NickName`, `PYInitial`, `PYQuanPin`, `RemarkName`, `RemarkPYInitial`, `RemarkPYQuanPin` , `Sex`, `Province`, `City`, `Signature`) VALUES (%s, %s, %s, %s, %s,%s, %s, %s, %s, %s)"</span></div><div class="line">            cursor.execute(sql,(kw.get(<span class="string">'NickName'</span>),kw.get(<span class="string">'PYInitial'</span>),kw.get(<span class="string">'PYQuanPin'</span>),kw.get(<span class="string">'RemarkName'</span>,<span class="string">'无'</span>),kw.get(<span class="string">'RemarkPYInitial'</span>),kw.get(<span class="string">'RemarkPYQuanPin'</span>),kw.get(<span class="string">'Sex'</span>),kw.get(<span class="string">'Province'</span>),kw.get(<span class="string">'City'</span>),kw.get(<span class="string">'Signature'</span>)))</div><div class="line">            connection.commit()</div><div class="line">    except Exception <span class="keyword">as</span> e:</div><div class="line">        print(e)</div><div class="line">    finally:</div><div class="line">        connection.close()</div><div class="line"></div><div class="line">def get_auto_friends_username():</div><div class="line">    for i, friend <span class="keyword">in</span> enumerate(itchat.get_friends()):</div><div class="line">        <span class="keyword">if</span> autoDict.get(friend[<span class="string">'PYQuanPin'</span>]):</div><div class="line">            autoUserNames[friend[<span class="string">'UserName'</span>]] = friend[<span class="string">'NickName'</span>]</div><div class="line">        else:</div><div class="line">            pass</div><div class="line">            # <span class="keyword">with</span> open(<span class="string">'friends_base.info'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</div><div class="line">            #     f.write(<span class="string">'昵称:'</span> + friend[<span class="string">'NickName'</span>] +  <span class="string">'  备注: '</span> + (friend[<span class="string">'RemarkName'</span>] == <span class="string">''</span> ? <span class="string">'无'</span>: friend[<span class="string">'RemarkName'</span>]) + <span class="string">' 性别:'</span> + str(friend[<span class="string">'Sex'</span>]) + <span class="string">' 区域: '</span>+ friend[<span class="string">'Province'</span>] + friend[<span class="string">'City'</span>] + <span class="string">' 签名:'</span> +friend[<span class="string">'Signature'</span>] +  <span class="string">'\n'</span>)</div><div class="line">        add_to_db(**friend) # 添加用户信息到MySQL数据库friends表中</div><div class="line">    print(<span class="string">'如下的用户发送text消息，系统将自动回复：'</span>)</div><div class="line">    for user <span class="keyword">in</span> autoUserNames.values():</div><div class="line">        print(<span class="string">'---------------------------------------------'</span>)</div><div class="line">        print(<span class="string">'--------------&#123;&#125;'</span>.format(user))</div><div class="line">    images = get_all_friends_img()</div><div class="line">    # images.reverse()</div><div class="line">    make_all_friends_img(images)</div><div class="line">    itchat.send(<span class="string">'@img@&#123;&#125;'</span>.format(<span class="string">'all_friend.jpg'</span>))#登录时将会把所有好友头像合照发送给登录账户</div><div class="line"></div><div class="line"></div><div class="line">itchat.auto_login(loginCallback=get_auto_friends_username, enableCmdQR=<span class="literal">False</span>)</div><div class="line">itchat.run()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/337803-ada279ae9405b7dd.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;all_friend.gif&quot;&gt;&lt;/
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP调试环境搭建(xdebug+PHPstorm +Chrome插件 Xdbug helper)</title>
    <link href="http://zhangyake.github.io/2017/01/08/phpdebug/"/>
    <id>http://zhangyake.github.io/2017/01/08/phpdebug/</id>
    <published>2017-01-08T03:35:50.000Z</published>
    <updated>2017-07-26T04:55:35.285Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><a href="https://xdebug.org/download.php" target="_blank" rel="external">xdebug网站</a>下载对应版本的扩展插件<br>由于windows7(64位系统)上的php版本是7.0.6，此处下载的xdebug也是64位7.0的版本如图：<br><img src="http://7xqeyw.com1.z0.glb.clouddn.com/xdebug_dll_down.png" alt=""></li>
<li>将下载的<strong>php_xdebug-2.5.0-7.0-vc14-x86_64.dll</strong>文件拷贝到php安装目录的ext文件夹中（我电脑是中D:\phpEnv\php7.0.6\ext）</li>
<li>打开php.ini文件，在末尾添加下面代码片段:</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">zend_extension = <span class="string">"D:\phpEnv\php7.0.6\ext\php_xdebug-2.5.0-7.0-vc14-x86_64.dll"</span></div><div class="line">xdebug<span class="selector-class">.remote_enable</span> = On</div><div class="line">xdebug<span class="selector-class">.remote_handler</span> = dbgp</div><div class="line">xdebug<span class="selector-class">.remote_host</span> = localhost</div><div class="line">xdebug<span class="selector-class">.remote_port</span> = <span class="number">9000</span></div><div class="line">xdebug<span class="selector-class">.idekey</span> = PHPSTROM</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>打开PHPstorm 这里用的版本是phpstorm2016.2.2 ，进入File—&gt;Settings—&gt;Languages &amp; Frameworks—&gt;PHP—&gt;Servers 点击+号 添加 name： localhost<br>Host:  localhost Port: 80 Debugger: xdebug 之后点击Apply确认<br><img src="./phpstorm_php_server.png" alt=""></li>
<li>进入PHP下的Debug 将xdebug的 debug port:设置为9000 和 xdebug.remote_port = 9000一致 其他默认 确定 ok即可<br><img src="./phpstorm_php_server.png" alt=""></li>
<li>打开chrome浏览器 下载xdebug helper插件(可能要翻墙)，点击选项配置为phpstorm。如图<br><img src="./chrome_xdebug_helper_install.png" alt=""><br><img src="./chrome_xdebug_helper_conf1.png" alt=""><br><img src="./chrome_xdebug_helper_conf2.png" alt=""></li>
<li>设置插件xdebug helper 状态打开如图<br><img src="./chrome_xdbughelper_able.png" alt=""></li>
<li>在phpstorme 打开下图中的按钮，设置断点，启动服务器即可进入调试查看：<br><img src="./php_debug.png" alt=""></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://xdebug.org/download.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xdebug网站&lt;/a&gt;下载对应版本的扩展插件&lt;br&gt;由于windows7(64位系统)上的php版本是7.0.6，此处下载的xdebug也是64位7.0的版本如图：&lt;br&gt;&lt;img src=&quot;http://7xqeyw.com1.z0.glb.clouddn.com/xdebug_dll_down.png&quot; alt=&quot;&quot;&gt;&lt;/li&gt;
&lt;li&gt;将下载的&lt;strong&gt;php_xdebug-2.5.0-7.0-vc14-x86_64.dll&lt;/strong&gt;文件拷贝到php安装目录的ext文件夹中（我电脑是中D:\phpEnv\php7.0.6\ext）&lt;/li&gt;
&lt;li&gt;打开php.ini文件，在末尾添加下面代码片段:&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;zend_extension = &lt;span class=&quot;string&quot;&gt;&quot;D:\phpEnv\php7.0.6\ext\php_xdebug-2.5.0-7.0-vc14-x86_64.dll&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xdebug&lt;span class=&quot;selector-class&quot;&gt;.remote_enable&lt;/span&gt; = On&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xdebug&lt;span class=&quot;selector-class&quot;&gt;.remote_handler&lt;/span&gt; = dbgp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xdebug&lt;span class=&quot;selector-class&quot;&gt;.remote_host&lt;/span&gt; = localhost&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xdebug&lt;span class=&quot;selector-class&quot;&gt;.remote_port&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;9000&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xdebug&lt;span class=&quot;selector-class&quot;&gt;.idekey&lt;/span&gt; = PHPSTROM&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zhangyake.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="http://zhangyake.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP中的设计模式学习（C）</title>
    <link href="http://zhangyake.github.io/2017/01/04/phpmodelc/"/>
    <id>http://zhangyake.github.io/2017/01/04/phpmodelc/</id>
    <published>2017-01-04T08:11:28.000Z</published>
    <updated>2017-07-26T05:35:42.317Z</updated>
    
    <content type="html"><![CDATA[<h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>观察者模式定义了对象间的一种一对多的依赖关系。以便一个对象的状态发生变化后，所有依赖它的对象都得到通知并自动刷新。该模式必须包含两个角色：观察者和被观察对象。观察者和被观察者之间存在<strong>观察</strong>的逻辑关联，当被观察者发生改变的时候，观察者就会观察到这样的变化，并且做出相应的响应。</p>
<p>在PHP SPL标准库中已经提供<a href="http://php.net/manual/zh/class.splsubject.php" target="_blank" rel="external">SplSubject(被观察对象)</a>和<a href="http://php.net/manual/zh/class.splobserver.php" target="_blank" rel="external">SqlOberver(观察者)</a> 接口.</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 被观察对象 SplSubject  接口摘要 */</span></div><div class="line">SplSubject &#123;</div><div class="line"><span class="comment">/* 方法 */</span></div><div class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span> (<span class="params"> SplObserver $observer </span>)</span></div><div class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span> (<span class="params"> SplObserver $observer </span>)</div><div class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span> (<span class="params"> <span class="keyword">void</span> </span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 观察者 SqlOberver 接口摘要 */</span></div><div class="line">SplObserver &#123;</div><div class="line"><span class="comment">/* 方法 */</span></div><div class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span> (<span class="params"> SplSubject $subject </span>)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体实现代码示例：<br><a id="more"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 被观察者类的实现</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">implements</span> \<span class="title">SplSubject</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $observers = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加观察者</div><div class="line">     * <span class="doctag">@param</span> SplObserver $observer</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attach</span><span class="params">(SplObserver $observer)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!in_array($observer, <span class="keyword">$this</span>-&gt;observers)) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;observers[] = $observer;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 移除观察者</div><div class="line">     * <span class="doctag">@param</span> SplObserver $observer</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">detach</span><span class="params">(SplObserver $observer)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span> != ($index = array_search($observer, <span class="keyword">$this</span>-&gt;observers))) &#123;</div><div class="line">            <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;observers[$index]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//完成自身功能后通知观察者</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//post相关code</span></div><div class="line">        <span class="comment">//balabala ……</span></div><div class="line">        <span class="keyword">$this</span>-&gt;notify();  <span class="comment">//完成自身功能后通知观察者</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 通知观察者</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">notify</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;observers <span class="keyword">as</span> $observer) &#123;</div><div class="line">            $observer-&gt;update(<span class="keyword">$this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//观察者1</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer1</span> <span class="keyword">implements</span> <span class="title">SplObserver</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> SplSubject $subject</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(SplSubject $subject)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"执行观察者1 相关逻辑"</span>;</div><div class="line">         <span class="comment">// balabla</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//观察者2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer2</span> <span class="keyword">implements</span> <span class="title">SplObserver</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> SplSubject $subject</div><div class="line">     * <span class="doctag">@return</span> mixed</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">(SplSubject $subject)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">"执行观察者2 相关逻辑"</span>;</div><div class="line">        <span class="comment">// balabla</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$subject = <span class="keyword">new</span> Subject();  <span class="comment">//一个被观察者的实例</span></div><div class="line">$subject-&gt;attach(<span class="keyword">new</span> Observer1());<span class="comment">// 添加一个观察者</span></div><div class="line">$subject-&gt;attach(<span class="keyword">new</span> Observer2());<span class="comment">// 再添加又一个观察者</span></div><div class="line">$subject-&gt;post();<span class="comment">// 被观察者执行自身任务，通知观察者事件触发执行</span></div></pre></td></tr></table></figure></p>
<h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>原型模式与工厂模式作用类似，也是用来创建对象的。不同的是，原型模式是先创建好一个原型对象，然后通过clone原型来创建新的对象，这样避免了类创建时的重复的初始化操作。原型模式主要适用于某些大型的结构复杂的对象的创建工作，创建一个对象需要大的开销，每次new消耗很大，使用原型模式只需内存拷贝即可。<br>实现代码示例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 声明一个克隆自身的接口 </span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Prototype</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">copy</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 实现一个克隆自身的操作 </span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype</span> <span class="keyword">implements</span> <span class="title">Prototype</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">($name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//克隆</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">copy</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">clone</span> <span class="keyword">$this</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$prototype = <span class="keyword">new</span> ConcretePrototype(<span class="string">'32'</span>);</div><div class="line">$pro1 = $prototype-&gt;copy(); <span class="comment">//通过拷贝原型创建新的对象1</span></div><div class="line">$pro2 = $prototype-&gt;copy(); <span class="comment">//通过拷贝原型创建新的对象2</span></div><div class="line"><span class="keyword">echo</span>  $pro1-&gt;getName();</div><div class="line"><span class="keyword">echo</span>  $pro2-&gt;getName();</div></pre></td></tr></table></figure></p>
<h4 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h4><p>装饰器模式又叫装饰者模式。在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。它是通过创建一个包装对象，也就是装饰来包裹真实的对象。通常给对象添加功能，要么直接修改对象添加相应的功能，要么派生对应的子类来扩展，抑或是使用对象组合的方式。显然，直接修改对应的类这种方式并不可取。在面向对象的设计中，我们也应该尽量使用对象组合，而不是对象继承来扩展和复用功能。装饰器模式就是基于对象组合的方式，可以很灵活的给对象添加所需要的功能。<br>代码示例：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 组件对象接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">ICompoment</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Display</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 待装饰对象</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">ICompoment</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $data ;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($data)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (is_array($data))&#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;data = $data;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Display</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 所有装饰器父类</span></div><div class="line"><span class="keyword">abstract</span>  <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">implements</span> <span class="title">ICompoment</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $component;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(ICompoment $component)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;component = $component;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体装饰器1</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenderToJson</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Display</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $returnData = <span class="keyword">$this</span>-&gt;component-&gt;Display();</div><div class="line">        <span class="keyword">return</span> json_encode($returnData);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 具体装饰器2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RenderToXml</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Display</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        $returnData = <span class="keyword">$this</span>-&gt;component-&gt;Display();</div><div class="line">        $doc = <span class="keyword">new</span> \DOMDocument();</div><div class="line">        <span class="keyword">foreach</span> ($returnData <span class="keyword">as</span>  $key =&gt; $value)&#123;</div><div class="line">            $doc-&gt;appendChild($doc-&gt;createElement($key,$value));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> $doc-&gt;saveXML();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$service = <span class="keyword">new</span> Service(<span class="keyword">array</span>(<span class="string">'name'</span>=&gt;<span class="string">'Tom'</span>));</div><div class="line">$service = <span class="keyword">new</span> RenderToJson($service);</div><div class="line">var_dump($service-&gt;Display());</div><div class="line">$service1 = <span class="keyword">new</span> Service([<span class="string">'name'</span>=&gt;<span class="string">'Tom'</span>,<span class="string">'age'</span>=&gt;<span class="number">24</span>,<span class="string">'sex'</span>=&gt;<span class="string">'男'</span>]);</div><div class="line">$service1 = <span class="keyword">new</span> RenderToXml($service1);</div><div class="line">var_dump($service1-&gt;Display());</div></pre></td></tr></table></figure></p>
<h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><p>迭代器模式提供一种方法顺序访问一个聚合对象中的各种元素，而又不暴露该对象的内部表示。为遍历不同的聚合结构提供一个统一的接口。<br>PHP SPL标准库中已经提供<a href="http://php.net/manual/zh/class.iterator.php" target="_blank" rel="external"> Iterator接口</a>（迭代器接口）<br>Iterator（迭代器）接口摘要</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Iterator <span class="keyword">extends</span> Traversable &#123;</div><div class="line">    <span class="comment">/* 方法 */</span></div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> mixed current ( <span class="keyword">void</span> )</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> scalar key ( <span class="keyword">void</span> )</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">next</span> ( <span class="keyword">void</span> )</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> rewind ( <span class="keyword">void</span> )</div><div class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">boolean</span> valid ( <span class="keyword">void</span> )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码示例</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实现Iterator的一个类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIterator</span> <span class="keyword">implements</span> \<span class="title">Iterator</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> $position = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> $array = <span class="keyword">array</span>(</div><div class="line">        <span class="string">"firstelement"</span>,</div><div class="line">        <span class="string">"secondelement"</span>,</div><div class="line">        <span class="string">"lastelement"</span>,</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;position = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rewind</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//        var_dump(__METHOD__);</span></div><div class="line">        <span class="keyword">$this</span>-&gt;position = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">current</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//        var_dump(__METHOD__);</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;array[<span class="keyword">$this</span>-&gt;position];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">key</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//        var_dump(__METHOD__);</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//        var_dump(__METHOD__);</span></div><div class="line">        ++<span class="keyword">$this</span>-&gt;position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">valid</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//        var_dump(__METHOD__);</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;array[<span class="keyword">$this</span>-&gt;position]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$it = <span class="keyword">new</span> MyIterator;</div><div class="line"><span class="comment">// 实现迭代器后就可以使用foreach循环迭代</span></div><div class="line"><span class="keyword">foreach</span>($it <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">    var_dump($key, $value);</div><div class="line">    <span class="keyword">echo</span> <span class="string">"\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//$it = new MyIterator;</span></div><div class="line"><span class="comment">//while ($it-&gt;valid())&#123;</span></div><div class="line"><span class="comment">//    echo $it-&gt;current();</span></div><div class="line"><span class="comment">//    echo '&lt;br&gt;';</span></div><div class="line"><span class="comment">//    $it-&gt;next();</span></div><div class="line"><span class="comment">//&#125;</span></div></pre></td></tr></table></figure>
<h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>代理模式为其他对象提供一种代理以控制这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。<br><strong>代理模式组成</strong>：<br><strong>抽象角色</strong>：通过接口或抽象类声明真实角色实现的业务方法。<br><strong>代理角色</strong>：实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。<br><strong>真实角色</strong>：实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。<br>代码示例：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 抽象角色</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IRequest</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">($url)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 真实角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealObj</span> <span class="keyword">implements</span> <span class="title">IRequest</span></span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">($url)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'请求链接:'</span> . $url;</div><div class="line">        <span class="comment">//balabala</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 代理角色</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyObj</span> <span class="keyword">implements</span> <span class="title">IRequest</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_client;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">client</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_client <span class="keyword">instanceof</span> RealObj) &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;_client = <span class="keyword">new</span> RealObj();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_client;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">($url)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;client()-&gt;request($url);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$proxy = <span class="keyword">new</span> ProxyObj();</div><div class="line">$proxy-&gt;request(<span class="string">'http://www.google.com'</span>);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h4&gt;&lt;p&gt;观察者模式定义了对象间的一种一对多的依赖关系。以便一个对象的状态发生变化后，所有依赖它的对象都得到通知并自动刷新。该模式必须包含两个角色：观察者和被观察对象。观察者和被观察者之间存在&lt;strong&gt;观察&lt;/strong&gt;的逻辑关联，当被观察者发生改变的时候，观察者就会观察到这样的变化，并且做出相应的响应。&lt;/p&gt;
&lt;p&gt;在PHP SPL标准库中已经提供&lt;a href=&quot;http://php.net/manual/zh/class.splsubject.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SplSubject(被观察对象)&lt;/a&gt;和&lt;a href=&quot;http://php.net/manual/zh/class.splobserver.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SqlOberver(观察者)&lt;/a&gt; 接口.&lt;/p&gt;
&lt;figure class=&quot;highlight cs&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 被观察对象 SplSubject  接口摘要 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SplSubject &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 方法 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;attach&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt; SplObserver $observer &lt;/span&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;detach&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt; SplObserver $observer &lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;notify&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 观察者 SqlOberver 接口摘要 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SplObserver &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 方法 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt; SplSubject $subject &lt;/span&gt;)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体实现代码示例：&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zhangyake.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="http://zhangyake.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>这首歌能听,不能下载？看这里</title>
    <link href="http://zhangyake.github.io/2016/12/30/other01/"/>
    <id>http://zhangyake.github.io/2016/12/30/other01/</id>
    <published>2016-12-30T08:44:07.000Z</published>
    <updated>2017-07-26T05:36:40.341Z</updated>
    
    <content type="html"><![CDATA[<p>你是不是听到好听的歌曲总想点击下载，可时当你点击下载时却不能下载。这里提供一个解决方案，基本上网易云音乐啊，QQ音乐什么的 ，其他的酷狗，酷我音乐也类似 . 这里介绍一下网易云音乐和QQ音乐中一些歌曲点击下载时却不能下载小技巧。这里推荐使用Chrome浏览器吧，其他的也可以，不要告诉我你还在用IE 。<em>—— 关爱前端程序员,请使用现代浏览器。</em><br> <a id="more"></a></p>
<h5 id="比如这首歌-缘分一道桥（电影《长城》片尾曲）-在手机app网易云音乐上不能下载。"><a href="#比如这首歌-缘分一道桥（电影《长城》片尾曲）-在手机app网易云音乐上不能下载。" class="headerlink" title="比如这首歌 缘分一道桥（电影《长城》片尾曲）  在手机app网易云音乐上不能下载。"></a>比如这首歌<a href="http://music.163.com/#/song?id=440411424" target="_blank" rel="external"> 缘分一道桥（电影《长城》片尾曲）</a>  在手机app网易云音乐上不能下载。</h5><p><img src="./cc.jpg" alt=""></p>
<h5 id="Next-来到浏览器-打开网易云音乐-http-music-163-com"><a href="#Next-来到浏览器-打开网易云音乐-http-music-163-com" class="headerlink" title="Next 来到浏览器 打开网易云音乐 http://music.163.com/"></a>Next 来到浏览器 打开<a href="http://music.163.com/" target="_blank" rel="external">网易云音乐</a> <a href="http://music.163.com/#/song?id=440411424" target="_blank" rel="external">http://music.163.com/</a></h5><h5 id="找到这首你可以听却不能在手机上下载的这首歌的页面如下："><a href="#找到这首你可以听却不能在手机上下载的这首歌的页面如下：" class="headerlink" title="找到这首你可以听却不能在手机上下载的这首歌的页面如下："></a>找到这首你可以听却不能在手机上下载的这首歌的页面如下：</h5><p><img src="./wycc.png" alt=""></p>
<h5 id="接下来，快捷键F12-打开-开发者控制台，点击下图中的Network，此时刷新页面-F5快捷键"><a href="#接下来，快捷键F12-打开-开发者控制台，点击下图中的Network，此时刷新页面-F5快捷键" class="headerlink" title="接下来，快捷键F12 打开 开发者控制台，点击下图中的Network，此时刷新页面(F5快捷键)"></a>接下来，快捷键F12 打开 开发者控制台，点击下图中的Network，此时刷新页面(F5快捷键)</h5><p><img src="./wyf12.png" alt=""></p>
<h5 id="接下来点击上图中的Media-或者-Other-你想要的东西就在这里啦，点击播放按钮-你想要的就来了。看到mp3的后缀了么，双击打开页面右键另存为即可下载到电脑，修改名字即可-如果Media中没有-就在Other里了。看下图"><a href="#接下来点击上图中的Media-或者-Other-你想要的东西就在这里啦，点击播放按钮-你想要的就来了。看到mp3的后缀了么，双击打开页面右键另存为即可下载到电脑，修改名字即可-如果Media中没有-就在Other里了。看下图" class="headerlink" title="接下来点击上图中的Media 或者 Other 你想要的东西就在这里啦，点击播放按钮,你想要的就来了。看到mp3的后缀了么，双击打开页面右键另存为即可下载到电脑，修改名字即可 如果Media中没有 就在Other里了。看下图"></a>接下来点击上图中的Media 或者 Other 你想要的东西就在这里啦，点击播放按钮,你想要的就来了。看到mp3的后缀了么，双击打开页面右键另存为即可下载到电脑，修改名字即可 如果Media中没有 就在Other里了。看下图</h5><p><img src="./wyf121.png" alt=""></p>
<h3 id="具体的演示操作见下gif-网易云音乐"><a href="#具体的演示操作见下gif-网易云音乐" class="headerlink" title="具体的演示操作见下gif(网易云音乐)"></a>具体的演示操作见下gif(网易云音乐)</h3><p><img src="./testwy.gif" alt="网易云音乐下载演示"></p>
<h3 id="QQ音乐-操作演示见下gif"><a href="#QQ音乐-操作演示见下gif" class="headerlink" title="QQ音乐 操作演示见下gif"></a>QQ音乐 操作演示见下gif</h3><p><img src="./testqq.gif" alt="QQ音乐下载演示"></p>
<h4 id="拿走-不谢"><a href="#拿走-不谢" class="headerlink" title="拿走,不谢"></a>拿走,不谢</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你是不是听到好听的歌曲总想点击下载，可时当你点击下载时却不能下载。这里提供一个解决方案，基本上网易云音乐啊，QQ音乐什么的 ，其他的酷狗，酷我音乐也类似 . 这里介绍一下网易云音乐和QQ音乐中一些歌曲点击下载时却不能下载小技巧。这里推荐使用Chrome浏览器吧，其他的也可以，不要告诉我你还在用IE 。&lt;em&gt;—— 关爱前端程序员,请使用现代浏览器。&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="分享" scheme="http://zhangyake.github.io/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="其他" scheme="http://zhangyake.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP中的设计模式学习（B）</title>
    <link href="http://zhangyake.github.io/2016/12/29/phpmodelb/"/>
    <id>http://zhangyake.github.io/2016/12/29/phpmodelb/</id>
    <published>2016-12-29T08:14:18.000Z</published>
    <updated>2017-07-26T05:37:24.197Z</updated>
    
    <content type="html"><![CDATA[<h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>适配器模式就是定义一个适配器接口，符合这些适配器的类必须继承并实现适配器方法。适配器模式简单的说就是将不同的函数接口封装成统一的API。实际应用的例子比如,PHP的数据库操作有mysql,mysqli,pdo 三种,(mysql操作 PHP7已经废弃了推荐用mysqli,pdo 代替),可以用适配器模式统一成一致(见下面代码示例). 类似的场景还有cache适配器,将memcache,redis,file,apc等不同的缓存函数,统一成一致，比如目前比较优雅的一个PHP框架  <a href="http://www.golaravel.com/laravel/" target="_blank" rel="external">laravel</a> 中的缓存的使用就是这样，不论是使用redis还是用memcache作为缓存，使用的方法都是一致的。<br><a id="more"></a><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义一个适配器接口</span></div><div class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">IDatabase</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">($host,$user,$pwd,$dbname)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">($sql)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实现适配器1</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQLi</span> <span class="keyword">implements</span> <span class="title">IDatabase</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $conn;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">($host, $user, $pwd, $dbname)</span></span></div><div class="line">    &#123;</div><div class="line">     $conn = mysqli_connect($host,$user,$pwd,$dbname);</div><div class="line">        <span class="keyword">$this</span>-&gt;conn = $conn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">($sql)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> mysqli_query(<span class="keyword">$this</span>-&gt;conn,$sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">       mysqli_close(<span class="keyword">$this</span>-&gt;conn);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="comment">// 实现适配器2</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PDO</span> <span class="keyword">implements</span> <span class="title">IDatabase</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $conn;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">connect</span><span class="params">($host, $user, $pwd, $dbname)</span></span></div><div class="line">    &#123;</div><div class="line">        $conn = <span class="keyword">new</span> \PDO(<span class="string">"mysql:host=$host;dbname=$dbname"</span>, $user, $pwd);</div><div class="line">        <span class="keyword">$this</span>-&gt;conn = $conn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">($sql)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;conn-&gt;query($sql);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">unset</span>(<span class="keyword">$this</span>-&gt;conn);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">$db = <span class="keyword">new</span> MySQLi(); <span class="comment">// or  $db = new PDO(); </span></div><div class="line"><span class="comment">// 这里无论你是使用 MySQLi 还是 PDO 下面调用都是一致的</span></div><div class="line">$db-&gt;connect(<span class="string">'192.168.10.14'</span>,<span class="string">'root'</span>,<span class="string">'root'</span>,<span class="string">'atest'</span>);</div><div class="line">$result = $db-&gt;query(<span class="string">'SELECT * FROM tb_user'</span>);</div><div class="line">$db-&gt;close();</div></pre></td></tr></table></figure></p>
<h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>策略模式定义了一系列的算法，并将每一个算法封装起来，而且使它们还可以相互转换。策略模式让算法独立于使用它的客户而独立变化。策略模式的组成：</p>
<ul>
<li>抽象策略角色： 策略类，通常由一个接口或者抽象类实现。</li>
<li>具体策略角色：包装了相关的算法和行为。</li>
<li>环境角色：持有一个策略类的引用，最终给客户端调用。<br>PHP 代码实现：</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//抽象策略角色</span></div><div class="line"><span class="comment">/**</span></div><div class="line"> *定义策略基类 以及包含的策略方法 </div><div class="line"> * 此处是一个出行旅游的方法</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TravelStrategy</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">travelAlgorithm</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//具体策略类 实现策略</span></div><div class="line"><span class="comment">//1：乘坐飞机</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirPlaneStrategy</span> <span class="keyword">implements</span> <span class="title">TravelStrategy</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">travelAlgorithm</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'travel by ariplane'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//具体策略类 实现策略</span></div><div class="line"><span class="comment">//2：乘坐火车</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrainStrategy</span> <span class="keyword">implements</span> <span class="title">TravelStrategy</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">travelAlgorithm</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'travel by train'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//具体策略类 实现策略</span></div><div class="line"><span class="comment">//3：骑自行车</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BicycleStrategy</span> <span class="keyword">implements</span> <span class="title">TravelStrategy</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">travelAlgorithm</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'travel by bicycle'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**环境类(Context):</span></div><div class="line"> *用一个ConcreteStrategy对象来配置。</div><div class="line"> *维护一个对Strategy对象的引用。可定义一个接口来让Strategy访问它的数据。</div><div class="line"> *算法解决类，以提供客户选择使用何种解决方案：</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonContext</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $_strategy = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(TravelStrategy $travel)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_strategy = $travel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTravelStrategy</span><span class="params">(TravelStrategy $travel)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;_strategy = $travel;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">travel</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_strategy-&gt;travelAlgorithm();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//乘坐火车旅行</span></div><div class="line">$person = <span class="keyword">new</span> PersonContext(<span class="keyword">new</span> TrainStrategy()); <span class="comment">// 设置，使用策略</span></div><div class="line">$person-&gt;travel();</div><div class="line"></div><div class="line"><span class="comment">//改骑自行车</span></div><div class="line">$person-&gt;setTravelStrategy(<span class="keyword">new</span> BicycleStrategy());<span class="comment">// 设置策略，使用策略</span></div><div class="line">$person-&gt;travel();</div></pre></td></tr></table></figure>
<h4 id="数据映射模式"><a href="#数据映射模式" class="headerlink" title="数据映射模式"></a>数据映射模式</h4><p>数据映射模式能更好的组织程序与数据库进行交互。它将对象和数据存储映射起来，对一个对象的操作会映射为数据库存储的操作。在代码中实现数据对象映射模式，实现一个ORM类，将复杂的sql语句映射成对象属性的操作。自己的代码示例：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 被操作的对象类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> $id;</div><div class="line">    <span class="keyword">public</span> $name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;id;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setId</span><span class="params">($id)</span> </span>&#123; <span class="keyword">$this</span>-&gt;id = $id; &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name; &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">($name)</span> </span>&#123; <span class="keyword">$this</span>-&gt;name = $name; &#125;</div><div class="line">&#125;</div><div class="line"> <span class="comment">// 操作对象映射到数据库</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserMapper</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> $db;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;db = <span class="keyword">new</span> MySQLi(); <span class="comment">// 见适配器模式的模式的MySQLi</span></div><div class="line">        <span class="keyword">$this</span>-&gt;db-&gt;connect(<span class="string">'192.168.10.14'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>, <span class="string">'atest'</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> User $user</div><div class="line">     * <span class="doctag">@return</span> bool</div><div class="line">     * 保存user对象到数据库</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">saveUser</span><span class="params">(User $user)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> ($user-&gt;getId() === <span class="keyword">null</span>) &#123;</div><div class="line">            $sql = <span class="string">"INSERT INTO tb_user (name) VALUES ( '"</span> . $user-&gt;getName() . <span class="string">"')"</span>;</div><div class="line">            $res = <span class="keyword">$this</span>-&gt;db-&gt;query($sql);</div><div class="line">            <span class="keyword">return</span> $res;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">$this</span>-&gt;db-&gt;query(<span class="string">"update tb_user set name = "</span> . $user-&gt;getName() . <span class="string">" where id = "</span> . $user-&gt;getId());</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@param</span> $id</div><div class="line">     * <span class="doctag">@return</span> User|null</div><div class="line">     * 从数据库中查询返回一个user对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">findByUserId</span><span class="params">($id)</span></span></div><div class="line">    &#123;</div><div class="line">        $result = <span class="keyword">$this</span>-&gt;db-&gt;query(<span class="string">"select id , name from tb_user where id = "</span> . $id);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ($result) &#123;</div><div class="line">            $result = $result-&gt;fetch_assoc();</div><div class="line">            $entry = <span class="keyword">new</span> User();</div><div class="line">            $entry-&gt;setId($result[<span class="string">'id'</span>]);</div><div class="line">            $entry-&gt;setName($result[<span class="string">'name'</span>]);</div><div class="line">            <span class="keyword">return</span> $entry;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="comment">//简单调用</span></div><div class="line">$userMapper = <span class="keyword">new</span> UserMapper();</div><div class="line">$user = <span class="keyword">new</span> User();<span class="comment">// 创建对象</span></div><div class="line">$user-&gt;setName(<span class="string">'jack chen'</span>);</div><div class="line"></div><div class="line">$res = $userMapper-&gt;saveUser($user);<span class="comment">// 保存对象到数据库中</span></div><div class="line">var_dump($res);</div><div class="line">$user2 = $userMapper-&gt;findByUserId(<span class="number">1</span>);<span class="comment">// 查数据库 返回user对象</span></div><div class="line">var_dump($user2);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h4&gt;&lt;p&gt;适配器模式就是定义一个适配器接口，符合这些适配器的类必须继承并实现适配器方法。适配器模式简单的说就是将不同的函数接口封装成统一的API。实际应用的例子比如,PHP的数据库操作有mysql,mysqli,pdo 三种,(mysql操作 PHP7已经废弃了推荐用mysqli,pdo 代替),可以用适配器模式统一成一致(见下面代码示例). 类似的场景还有cache适配器,将memcache,redis,file,apc等不同的缓存函数,统一成一致，比如目前比较优雅的一个PHP框架  &lt;a href=&quot;http://www.golaravel.com/laravel/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;laravel&lt;/a&gt; 中的缓存的使用就是这样，不论是使用redis还是用memcache作为缓存，使用的方法都是一致的。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zhangyake.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="http://zhangyake.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP中的设计模式学习（A）</title>
    <link href="http://zhangyake.github.io/2016/12/28/phpmodel/"/>
    <id>http://zhangyake.github.io/2016/12/28/phpmodel/</id>
    <published>2016-12-28T01:44:48.000Z</published>
    <updated>2017-07-26T04:42:48.109Z</updated>
    
    <content type="html"><![CDATA[<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>简单来说工厂模式就是讲new操作封装在了工厂方法里，避免到处new某个对象。<br>工厂模式是一种类，它具有为你创建对象的一些方法，你可以使用工厂类创建对象，而不直接使用new的方式创建对象。这样，当您想更改所创建的对象类型时，只需要更改工厂即可。使用该工厂的所有代码会自动更改。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> $id;</div><div class="line">    <span class="keyword">private</span> $name;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($id, $name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">$this</span>-&gt;id = $id;</div><div class="line">        <span class="keyword">$this</span>-&gt;name = $name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 工厂类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Create</span><span class="params">($id, $name)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User($id, $name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>单例模式保证一个类仅有一个实例，并提供一个访问它的全局访问点。在它的核心结构中只包含一个被称为单例的特殊类。通过单例模式可以保证系统中一个类只有一个实例。php单例代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 静态变量 跟类绑定，保存全局实例；私有化变量 避免通过类名::@instance 直接调用，防止为空</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $instance;</div><div class="line"></div><div class="line">    <span class="comment">/* 私有化构造函数 ，防止外界实例化对象*/</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 私有化克隆函数，防止外界克隆对象</span></div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 静态方法，单例访问的统一入口，返回唯一的对象实例</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!(<span class="keyword">self</span>::$instance <span class="keyword">instanceof</span> <span class="keyword">self</span>)) &#123;</div><div class="line">            <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">self</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注册树模式"><a href="#注册树模式" class="headerlink" title="注册树模式"></a>注册树模式</h4><p>注册树模式又叫注册模式/注册器模式，但是注册树模式更容易让人理解。注册树模式通过将对象实例注册到一棵全局的对象树上，需要的时候从对象树上采摘的模式设计方法。类似于小时候卖糖葫芦的将糖葫芦插在一个大的杆子上面，人们买的时候就取下来。不同的是，注册树模式摘下来还会有，能摘多次，糖葫芦摘一次就没有了 ……</p>
<h5 id="注册树模式想解决什么问题"><a href="#注册树模式想解决什么问题" class="headerlink" title="注册树模式想解决什么问题"></a>注册树模式想解决什么问题</h5><p>单例模式解决的是如何在整个项目中创建唯一对象实例的问题，工厂模式解决的是如何不通过new建立实例对象的方法。首先，单例模式创建唯一对象的过程本身还有一种判断，即判断对象是否存在。存在则返回对象，不存在则创建对象并返回。 每次创建实例对象都要存在这么一层判断。 工厂模式更多考虑的是扩展维护的问题。 总的来说，单例模式和工厂模式可以产生更加合理的对象。怎么方便调用这些对象呢？而且在项目内如此建立的对象好像散兵游勇一样，不便统筹管理安排啊。因而，注册树模式应运而生。不管你是通过单例模式还是工厂模式还是二者结合生成的对象，都统统给我“插到”注册树上。我用某个对象的时候，直接从注册树上取一下就好。这和我们使用全局变量一样的方便实用。而且注册树模式还为其他模式提供了一种非常好的想法。<br><strong>三种模式的小结合</strong><br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建单例</span></div><div class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Singleton</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $instance;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span> (!(<span class="keyword">self</span>::$instance <span class="keyword">instanceof</span> <span class="keyword">self</span>)) &#123;</div><div class="line">            <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">self</span>();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 工厂模式</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span>&#123;</div><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">factory</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> Single::getInstance();</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//注册树</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Register</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> $objects;</div><div class="line">    <span class="comment">// 注册到全局树上</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($alias, $object)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">self</span>::$objects[$alias] = $object;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 获取树上的对象</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($alias)</span></span></div><div class="line">    &#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">self</span>::$objects[$alias] ;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 释放树上的对象</span></div><div class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">_unset</span><span class="params">($alias)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">unset</span>(<span class="keyword">self</span>::$objects[$alias]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 注册</span></div><div class="line">Register::set(<span class="string">'db'</span>,Factory::factory());</div><div class="line"><span class="comment">// 其他地方使用注册的对象</span></div><div class="line">$DB = Register::get(<span class="string">'db'</span>);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h4&gt;&lt;p&gt;简单来说工厂模式就是讲new操作封装在了工厂方法里，避免到处new某个对象。&lt;br&gt;工厂模式是一种类，它具有为你创建对象的一些方法，你可以使用工厂类创建对象，而不直接使用new的方式创建对象。这样，当您想更改所创建的对象类型时，只需要更改工厂即可。使用该工厂的所有代码会自动更改。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; $name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($id, $name)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;id = $id;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;name = $name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;$this&lt;/span&gt;-&amp;gt;name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 工厂类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Factory&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($id, $name)&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; User($id, $name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zhangyake.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="http://zhangyake.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>CSS笔记</title>
    <link href="http://zhangyake.github.io/2016/10/06/css01/"/>
    <id>http://zhangyake.github.io/2016/10/06/css01/</id>
    <published>2016-10-06T08:11:52.000Z</published>
    <updated>2017-07-26T04:42:48.025Z</updated>
    
    <content type="html"><![CDATA[<h4 id="CSS-样式基本知识"><a href="#CSS-样式基本知识" class="headerlink" title="CSS 样式基本知识"></a>CSS 样式基本知识</h4><ul>
<li>直接写在html标签中的样式 ，<strong>内联式css样式</strong>   eg：</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p <span class="attribute">style</span>=<span class="string">"color:red"</span>&gt;这里文字是红色。&lt;/p</div></pre></td></tr></table></figure>
<ul>
<li>写在当前文件中的样式，<strong>嵌入式css样式</strong>   eg：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line"><span class="attribute">color</span>:red;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>写在单独的文件中的样式，<strong>外部式css样式</strong> eg：</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link <span class="attribute">href</span>=<span class="string">"main.css"</span> <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">type</span>=<span class="string">"text/css"</span> /&gt;</div></pre></td></tr></table></figure>
<ul>
<li>三种样式是有优先级的，他们的优先级：内联式 &gt; 嵌入式 &gt; 外部式（总结来说，就是–就近原则）<br>但是嵌入式&gt;外部式有一个前提：嵌入式css样式的位置一定在外部式的后面</li>
</ul>
<h4 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h4><ul>
<li>css样式定义中在{}之前的部分就是“选择器”，“选择器”指明了{}中的“样式”作用于网页中的哪些元素</li>
<li>标签选择器  就是选择html代码中的标签  <code>&lt;html&gt;、&lt;body&gt;、&lt;h1&gt;、&lt;p&gt;、&lt;img&gt;</code>等</li>
</ul>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">html标签&#123;css样式代码<span class="comment">;&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>类选择器         <code>为标签设置  class=&quot;类名称&quot;</code>   <code>英文圆点开头</code></li>
</ul>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.class类名称&#123;css样式代码<span class="comment">;&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>ID选择器器           <code>为标签设置id=&quot;ID名称&quot; 英文井号开头</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">ID名称&#123;css样式代码;&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>子选择器  大于符号(&gt;),用于选择指定标签元素的第一代子元素(儿子s女儿们)</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span>  &#123;<span class="attribute">border</span>:<span class="number">1px</span> solid red;&#125; ul下的子元素li（第一代子元素）加入红色实线边框。</div></pre></td></tr></table></figure>
<ul>
<li>包含(后代)选择器 加入空格,用于选择指定标签元素下的后辈元素</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span>  &#123;<span class="attribute">border</span>:<span class="number">1px</span> solid red;&#125; ul下的所有子元素li（所有子后代元素）加入红色实线边框。</div></pre></td></tr></table></figure>
<ul>
<li>子选择器（child selector）仅是指它的直接后代，或者你可以理解为作用于子元素的第一代后代。而后代选择器是作用于所有子后代元素。<strong>&gt; 作用于元素的第一代后代，空格作用于元素的所有后代 </strong></li>
<li>通用选择器  使用一个（*）号指定，它的作用是匹配html中所有标签元素</li>
</ul>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* &#123;<span class="built_in">color</span>:<span class="built_in">red</span>;&#125; <span class="comment">// html中任意标签元素字体颜色全部设置为红色</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>伪类选择符</strong> <code>允许给html不存在的标签（标签的某种状态）设置样式</code>，比如说我们给html中一个标签元素的鼠标滑过的状态来设置字体颜色 <code>a:hover{color:red;}</code></li>
<li>分组选择符 <code>为html中多个标签元素设置同一个样式</code>时，可以使用分组选择符（，）</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:red;&#125;  </div><div class="line">它相当于下面两行代码：</div><div class="line"><span class="selector-tag">h1</span>&#123;<span class="attribute">color</span>:red;&#125;</div><div class="line"><span class="selector-tag">span</span>&#123;<span class="attribute">color</span>:red;&#125;</div></pre></td></tr></table></figure>
<h4 id="CSS的继承-层叠-和特殊性"><a href="#CSS的继承-层叠-和特殊性" class="headerlink" title="CSS的继承 层叠 和特殊性"></a>CSS的继承 层叠 和特殊性</h4><ul>
<li>继承 - CSS的某些样式是具有继承性的，继承就是子标签继承了上级标签的CSS样式的属性</li>
<li>特殊性 - 为同一个元素设置了不同的CSS样式代码，那么元素会启用哪一个CSS样式 ，浏览器是根据权值来判断使用哪种css样式的，权值高的就使用哪种css样式 ，权值的规则 ：标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100</li>
<li>层叠 - 就是在html文件中对于同一个元素可以有多个css样式存在，当有相同权重的样式存在时，会根据这些css样式的前后顺序来决定，处于最后面的css样式会被应用</li>
<li>重要性 有些特殊的情况需要为某些样式设置具有最高权值，可以使用!important来解决  eg：<code>p{color:red!important;}</code></li>
</ul>
<h4 id="CSS格式化排版"><a href="#CSS格式化排版" class="headerlink" title="CSS格式化排版"></a>CSS格式化排版</h4><ul>
<li>文字排版</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> <span class="attribute">font-family</span>:<span class="string">'宋体'</span>;<span class="comment">// 字体</span></div><div class="line"> <span class="attribute">font-size</span>:<span class="number">14px</span>; <span class="comment">// 字号</span></div><div class="line"> <span class="attribute">color</span>:<span class="number">#fff</span>; <span class="comment">// 颜色</span></div><div class="line"> <span class="attribute">font-weight</span>:bold; <span class="comment">// 粗体</span></div><div class="line"> <span class="attribute">font-style</span>:italic; <span class="comment">// 斜体</span></div><div class="line"> <span class="attribute">text-decoration</span>:underline;<span class="comment">// 下划线</span></div><div class="line"> <span class="attribute">text-decoration</span>:line-through; <span class="comment">// 删除线</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>段落排版</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> <span class="attribute">text-indent</span>:<span class="number">2em</span>;  <span class="comment">// 缩进</span></div><div class="line"> <span class="attribute">line-height</span>:<span class="number">1.5em</span>;<span class="comment">// 行间距（行高）</span></div><div class="line"> <span class="attribute">letter-spacing</span>:<span class="number">50px</span>;<span class="comment">// 中文字间距、字母间距</span></div><div class="line"> <span class="attribute">word-spacing</span>:<span class="number">50px</span>;<span class="comment">// 单词间距设置</span></div><div class="line"> <span class="attribute">text-align</span>:center;<span class="comment">// 对齐</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h4><ul>
<li>块级元素 在html中<code>&lt;div&gt;、 &lt;p&gt;、&lt;h1&gt;、&lt;form&gt;、&lt;ul&gt; 和 &lt;li&gt;</code>就是块级元素。设置display:block就是将元素显示为块级元素， <code>每个块级元素都从新的一行开始，并且其后的元素也另起一行元素的高度、宽度、行高以及顶和底边距都可设置。元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度</code>。</li>
<li><code>&lt;span&gt;、&lt;a&gt;、&lt;label&gt;、 &lt;strong&gt; 和&lt;em&gt;</code>就是典型的内联元素（行内元素）（inline）元素。当然块状元素也可以通过代码display:inline将元素设置为内联元素，<code>内联元素和其他元素都在一行上；元素的高度、宽度及顶部和底部边距不可设置；元素的宽度就是它包含的文字或图片的宽度，不可改变</code></li>
<li>内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点，代码 <code>display:inline-block</code> 就是将元素设置为内联块状元素，<code>和其他元素都在一行上；元素的高度、宽度、行高以及顶和底边距都可设置</code></li>
<li>当为元素（不论之前是什么类型元素，display:none 除外）设置以下 2 个句之一：<code>position : absolute;  float : left 或 float:right</code> 简单来说，只要html代码中出现以上两句之一，元素的display显示类型就会自动变为以 display:inline-block（块状元素）的方式显示，就可以设置元素的 width 和 height </li>
</ul>
<h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p><img src="http://img.mukewang.com/543b4cae0001b34304300350.jpg" alt="enter image description here"><br><img src="http://img.mukewang.com/539fbb3a0001304305570259.jpg" alt="enter image description here"></p>
<h4 id="css布局模型"><a href="#css布局模型" class="headerlink" title="css布局模型"></a>css布局模型</h4><ol>
<li>流动模型（Flow） 流动（Flow）是默认的网页布局模型<br><em>在流动模型下，块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为100%。实际上，块状元素都会以行的形式占据位置</em><br><em>在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示</em></li>
<li>浮动模型 (Float)  float:left; float:right;<br>任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动 比如 float:left;</li>
<li>层模型（Layer） 层模型有三种形式：</li>
</ol>
<ul>
<li>绝对定位(position: absolute)<br>设置position:absolute(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。</li>
<li>相对定位(position: relative)<br>设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。<code>相对定位</code>完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，<code>偏移前的位置保留不动</code></li>
<li>固定定位(position: fixed)<br>设置position:fixed 表示固定定位，它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;CSS-样式基本知识&quot;&gt;&lt;a href=&quot;#CSS-样式基本知识&quot; class=&quot;headerlink&quot; title=&quot;CSS 样式基本知识&quot;&gt;&lt;/a&gt;CSS 样式基本知识&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;直接写在html标签中的样式 ，&lt;strong&gt;内联式css样式&lt;/strong&gt;   eg：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;p &lt;span class=&quot;attribute&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;color:red&quot;&lt;/span&gt;&amp;gt;这里文字是红色。&amp;lt;/p&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;写在当前文件中的样式，&lt;strong&gt;嵌入式css样式&lt;/strong&gt;   eg：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;span&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhangyake.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://zhangyake.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>接口签名学习(一)</title>
    <link href="http://zhangyake.github.io/2016/05/13/interfacesign01/"/>
    <id>http://zhangyake.github.io/2016/05/13/interfacesign01/</id>
    <published>2016-05-13T07:36:48.000Z</published>
    <updated>2017-07-26T04:42:48.029Z</updated>
    
    <content type="html"><![CDATA[<h4 id="接口签名"><a href="#接口签名" class="headerlink" title="接口签名"></a>接口签名</h4><p>不同系统平台之间可能要互相调用彼此的一些服务,此时接口开发是各系统之间对接的重要方式，其数据是通过开放的互联网传输，对数据的安全性要有一定要求。为了提高传输过程参数的防篡改性，签名sign的方式是目前比较常用的方式，工作中使用的也是这种方式，应该属于数字签名的方式。也是目前国内互联网公司常用的一种方式。比如<a href="http://kf.qq.com/faq/120322fu63YV130422aqUNJv.html" target="_blank" rel="external">腾讯的支付接口签名</a>.</p>
<h4 id="参数sign生成的方法"><a href="#参数sign生成的方法" class="headerlink" title="参数sign生成的方法"></a>参数sign生成的方法</h4><ul>
<li>第1步: 将所有参数（注意是所有参数），除去sign本身，以及值是空的参数，按参数名字母升序排序。</li>
<li>第2步: 然后把排序后的参数按参数1值1参数2值2…参数n值n的方式拼接成一个字符串。</li>
<li>第3步: 在上一步得到的字符串前面加上验证密钥key(这里的密钥key是接口提供方分配给接口接入方的)。</li>
<li>第4步: 计算第3步字符串的md5值(32位),然后转成大写,得到的字符串作为sign的值调用接口时把该sign值也发送过去。<a id="more"></a>
</li>
</ul>
<p>这里自己写了一个node版本的生成sign的函数(代码写的不好,欢迎吐槽)，同时发布到了npm上<a href="https://www.npmjs.com/package/getsignature" target="_blank" rel="external">https://www.npmjs.com/package/getsignature</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getsignature</span>(<span class="params">paramObject, secretKey</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>( util.isObject(paramObject) &amp;&amp; !util.isArray(paramObject) &amp;&amp; secretKey!=<span class="literal">null</span> &amp;&amp; secretKey!=<span class="string">''</span>)&#123;</div><div class="line">    <span class="keyword">var</span> tmp = [];<span class="comment">//存放参数名key</span></div><div class="line">    <span class="keyword">var</span> str = <span class="string">''</span>;<span class="comment">//存放拼接字符</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> paramObject) &#123;</div><div class="line">      tmp.push(key);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//参数名排序</span></div><div class="line">    tmp.sort();</div><div class="line">    <span class="comment">// 拼接字符串 key1+value1+key2+value2</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tmp.length; i &lt; len; i++) &#123;</div><div class="line">      str += (paramObject[tmp[i]] != <span class="literal">null</span> &amp;&amp; paramObject[tmp[i]] != <span class="string">''</span>) ? (tmp[i] + <span class="string">''</span> + paramObject[tmp[i]]) : <span class="string">''</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//拼接秘钥</span></div><div class="line">    str = secretKey + str;</div><div class="line">    <span class="comment">// md5加密</span></div><div class="line">    str =  crypto.createHash(<span class="string">"md5"</span>).update(str, <span class="string">'utf8'</span>).digest(<span class="string">"hex"</span>);</div><div class="line">    <span class="keyword">return</span> str.toUpperCase();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = getsignature;</div></pre></td></tr></table></figure>
<p><strong>安装</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install getsignature</span></div></pre></td></tr></table></figure>
<p><strong>示例</strong></p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> getsignature = <span class="keyword">require</span>(<span class="string">'getsignature'</span>);</div><div class="line"><span class="comment">// 生成签名所用参数 （调用外部接口要发送的参数）</span></div><div class="line"><span class="built_in">var</span> <span class="keyword">params</span> = &#123; <span class="string">'name'</span>:<span class="string">'abc'</span>,<span class="string">'age'</span>:<span class="number">24</span>,<span class="string">'sex'</span>:<span class="number">1</span> &#125;;</div><div class="line"><span class="comment">// 秘钥参数(约定好的)</span></div><div class="line"><span class="built_in">var</span> secretKey = <span class="string">'abcdef'</span>;</div><div class="line"><span class="comment">// 获取签名参数</span></div><div class="line"><span class="built_in">var</span> signature = getsignature(<span class="keyword">params</span>, secretKey);</div><div class="line">console.<span class="keyword">log</span>(signature); </div><div class="line"><span class="comment">// '71A9D9D21A122E287DA3051A9573F313'</span></div></pre></td></tr></table></figure>
<h4 id="签名验证方法"><a href="#签名验证方法" class="headerlink" title="签名验证方法"></a>签名验证方法</h4><p>根据前面描述的签名参数sign生成的方法规则，计算得到参数的签名值，和参数中通知过来的sign对应的参数值进行对比，如果是一致的，那么就校验通过，如果不一致，说明参数被修改过。<br>示例:（假定上方的node系统调用的是一个php接口）</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line">  $secretKey = <span class="string">'abcdef'</span>;<span class="comment">//先前约定好的秘钥</span></div><div class="line">  <span class="comment">//接受到的参数不包含sign参数 放进一个数组中</span></div><div class="line">  $param = <span class="keyword">array</span>(<span class="string">'name'</span> =&gt;<span class="string">'abc'</span>,<span class="string">'age'</span>=&gt;<span class="number">24</span>,<span class="string">'sex'</span>=&gt;<span class="number">1</span> );</div><div class="line">  $sign = $_REQUEST[<span class="string">'sign'</span>];</div><div class="line">  <span class="comment">//同样的方式计算签名</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSignature</span><span class="params">($param, $secretKey)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!is_array($param))&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    ksort($param);</div><div class="line">    </div><div class="line">    $str = <span class="string">''</span>;</div><div class="line">    <span class="keyword">foreach</span> ($param <span class="keyword">as</span> $key=&gt;$value) &#123;</div><div class="line">       <span class="keyword">if</span>($value!=<span class="keyword">NULL</span> &amp;&amp; $value!=<span class="string">''</span>)&#123;</div><div class="line">         $str .= ($key.$value); </div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $str= $secretKey. $str;</div><div class="line">    <span class="keyword">return</span> strtoupper(md5($str));</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//比较签名是否一致</span></div><div class="line">  <span class="keyword">echo</span> (getSignature($param, $secretKey) == $sign )?<span class="string">'签名有效'</span>:<span class="string">'参数被修改过'</span>;</div></pre></td></tr></table></figure>
<p>参考文档:<a href="http://kf.qq.com/faq/120322fu63YV130422aqUNJv.html" target="_blank" rel="external">http://kf.qq.com/faq/120322fu63YV130422aqUNJv.html</a><br>参考文档:<a href="http://www.tuicool.com/articles/jQJV3i" target="_blank" rel="external">http://www.tuicool.com/articles/jQJV3i</a><br>参考文档:<a href="http://www.oicto.com/web-api-sign-key-a/" target="_blank" rel="external">http://www.oicto.com/web-api-sign-key-a/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;接口签名&quot;&gt;&lt;a href=&quot;#接口签名&quot; class=&quot;headerlink&quot; title=&quot;接口签名&quot;&gt;&lt;/a&gt;接口签名&lt;/h4&gt;&lt;p&gt;不同系统平台之间可能要互相调用彼此的一些服务,此时接口开发是各系统之间对接的重要方式，其数据是通过开放的互联网传输，对数据的安全性要有一定要求。为了提高传输过程参数的防篡改性，签名sign的方式是目前比较常用的方式，工作中使用的也是这种方式，应该属于数字签名的方式。也是目前国内互联网公司常用的一种方式。比如&lt;a href=&quot;http://kf.qq.com/faq/120322fu63YV130422aqUNJv.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;腾讯的支付接口签名&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;参数sign生成的方法&quot;&gt;&lt;a href=&quot;#参数sign生成的方法&quot; class=&quot;headerlink&quot; title=&quot;参数sign生成的方法&quot;&gt;&lt;/a&gt;参数sign生成的方法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;第1步: 将所有参数（注意是所有参数），除去sign本身，以及值是空的参数，按参数名字母升序排序。&lt;/li&gt;
&lt;li&gt;第2步: 然后把排序后的参数按参数1值1参数2值2…参数n值n的方式拼接成一个字符串。&lt;/li&gt;
&lt;li&gt;第3步: 在上一步得到的字符串前面加上验证密钥key(这里的密钥key是接口提供方分配给接口接入方的)。&lt;/li&gt;
&lt;li&gt;第4步: 计算第3步字符串的md5值(32位),然后转成大写,得到的字符串作为sign的值调用接口时把该sign值也发送过去。
    
    </summary>
    
      <category term="后端" scheme="http://zhangyake.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="node" scheme="http://zhangyake.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>webpack入门</title>
    <link href="http://zhangyake.github.io/2016/03/30/webpack01/"/>
    <id>http://zhangyake.github.io/2016/03/30/webpack01/</id>
    <published>2016-03-30T03:12:42.000Z</published>
    <updated>2017-07-26T04:42:48.111Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是-webpack？"><a href="#什么是-webpack？" class="headerlink" title="什么是 webpack？"></a>什么是 webpack？</h4><p><a href="http://webpack.github.io/docs/" target="_blank" rel="external">webpack</a>是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。它就是一个前端工具，可以让我们进行各种模块加载，预处理后，再打包。任何静态资源都可以视作模块，然后模块之间也可以相互依赖，通过webpack对模块进行处理后，可以打包成我们想要的静态资源。<br><a id="more"></a></p>
<ol>
<li><p>安装webpack</p>
<p>首先需要安装<a href="https://nodejs.org" target="_blank" rel="external">node.js</a>环境,见<a href="https://nodejs.org" target="_blank" rel="external">node官网</a>.<br>安装nodejs后使用npm 安装 webpack命令</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install webpack -g</span></div></pre></td></tr></table></figure>
<p>  这样webpack 命令即能在全局环境下使用</p>
<ol>
<li><p>webpack小示例第一步</p>
<p>创建空目录Demo文件夹 文件夹中创建app空文件夹<br>在app文件夹中创建entry.js文件<br>文件内容如下 –entry.js</p>
</li>
</ol>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.write(<span class="string">"It works."</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>  在app文件夹中创建 index.html<br>  文件内容如下 –index.html </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>  执行命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> Demo/app</span></div><div class="line"><span class="meta">$</span><span class="bash"> webpack ./entry.js bundle.js</span></div></pre></td></tr></table></figure>
<p>该命令会对entry.js文件编译并创建一个bundle.js文件<br>如果成功的话，它会显示如下：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Hash: ca188ee5789bb780fcec</div><div class="line">Version: webpack 1.13.0</div><div class="line"><span class="keyword">Time:</span> 65ms</div><div class="line">    Asset     Size  Chunks             Chunk Names</div><div class="line">bundle.js  1.42 kB       0  [emitted]  main</div><div class="line">  [0] ./entry.js 28 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure>
<p>在浏览器中打开index.html 显示 It works.</p>
<ol>
<li><p>第二步依赖文件加载</p>
<p>在app文件夹下添加content.js内容为</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = <span class="string">"It works from content.js."</span>;</div></pre></td></tr></table></figure>
<p>  更改entry.js文件内容为:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">"./content.js"</span>));</div></pre></td></tr></table></figure>
<p>  执行命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> webpack ./entry.js bundle.js</span></div></pre></td></tr></table></figure>
<p>  刷新浏览器index.html页面, 显示It works from content.js.<br><em>webpack会分析你的输入文件的依赖的其他文件。这些文件（称为模块）都会最终包含在你的bundle.js中。webpack会给每个模块的一个独特的ID以及保存所有模块的ID以便在bundle.js文件访问。仅在启动时执行输入模块，在运行时提供需要的功能，并在需要时执行依赖.</em></p>
<ol>
<li><p>第一次使用loaders</p>
<p>我们要添加一个CSS文件到我们的示例中<br> webpack只能处理JavaScript本身，所以我们需要css-loader去装载CSS文件,同样也需要style-loader。<br><em>执行命令</em></p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm install css-loader style-loader</span></div></pre></td></tr></table></figure>
<p>   在app文件夹下添加style.css文件<br>    文件内容如下–style.css</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">background</span>: yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更新entry.js文件</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"!style!css!./style.css"</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">"./content.js"</span>));</div></pre></td></tr></table></figure>
<p>执行命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> webpack ./entry.js bundle.js</span></div></pre></td></tr></table></figure>
<p> 刷新浏览器index.html页面, 显示带有黄色背景的It works from content.js.</p>
<p> webpack只能处理JavaScript本身，style.css通过!style!css!装载机管道以特定的方式中改变输出 bundle.js 文件的内容。这些转换后的结果是一个JavaScript模块。<br>如果我们不想使用 require(“!style!css!./style.css”);<br>而想直接使用require(“./style.css”);<br>更新entry.js文件内容为:</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">"./style.css"</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="built_in">require</span>(<span class="string">"./content.js"</span>));</div></pre></td></tr></table></figure>
<p>执行命令时要绑定加载模块：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack ./entry<span class="selector-class">.js</span> bundle<span class="selector-class">.js</span> --module-bind <span class="string">'css=style!css'</span></div></pre></td></tr></table></figure>
<p>   刷新浏览器index.html页面, 显示同样的效果。<br>  某些环境下这里可能要用双引号 “css=style!css”</p>
<ol>
<li><p>使用配置文件 <strong>webpack.config.js</strong></p>
<p>在Demo文件夹下创建webpack.config.js<br>文件内容如下:</p>
</li>
</ol>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line"><span class="symbol">    entry:</span> <span class="string">"./app/entry.js"</span>,</div><div class="line"><span class="symbol">    output:</span> &#123;</div><div class="line"><span class="symbol">        path:</span> __dirname,</div><div class="line"><span class="symbol">        filename:</span> <span class="string">"./app/bundle.js"</span></div><div class="line">    &#125;,</div><div class="line"><span class="symbol">    module:</span> &#123;</div><div class="line"><span class="symbol">        loaders:</span> [</div><div class="line">            &#123; test: /\.css$/, loader: <span class="string">"style!css"</span> &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  现在只需要在Demo目录下执行命令:</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">    $ webpack</div><div class="line">执行成功会显示:</div><div class="line"><span class="symbol">    Hash:</span> ab14e3789227f2cbf6c0</div><div class="line"><span class="symbol">    Version:</span> webpack <span class="number">1.13</span><span class="number">.0</span></div><div class="line"><span class="symbol">    Time:</span> <span class="number">955</span>ms</div><div class="line">            Asset     Size  Chunks            Chunk Names</div><div class="line">    .<span class="meta-keyword">/app/</span>bundle.js  <span class="number">11.8</span> kB       <span class="number">0</span>  [emitted]  main</div><div class="line">       [<span class="number">0</span>] .<span class="meta-keyword">/app/</span>entry.js <span class="number">67</span> <span class="class">bytes </span>&#123;<span class="number">0</span>&#125; [built]</div><div class="line">       [<span class="number">5</span>] .<span class="meta-keyword">/app/</span>content.js <span class="number">45</span> <span class="class">bytes </span>&#123;<span class="number">0</span>&#125; [built]</div><div class="line">          + <span class="number">4</span> hidden modules</div></pre></td></tr></table></figure>
<p>   <strong>webpack会自动加载当前目录下的webpack.config.js文件</strong></p>
<ol>
<li>漂亮的输出<br>随着项目的增长，编译可能需要更长的时间。所以我们要展示一些进度条、颜色…可以使用命令</li>
</ol>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">$webpack</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">progress</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">colors</span></div></pre></td></tr></table></figure>
<ol>
<li>使用watch model<br>使用watch model模式时，可理解为监听模式,如果检测到任何文件更改，它将再次运行编译。</li>
</ol>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta"><span class="meta-keyword">$webpack</span> --watch</span></div></pre></td></tr></table></figure>
<ol>
<li>使用webpack开发服务器</li>
</ol>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// npm 全局安装webpack开发服务器</span></div><div class="line">$ npm install webpack-dev-<span class="keyword">server</span> -g</div></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">在Demo文件夹下执行</div><div class="line">    $ webpack-dev-server --progress --colors</div><div class="line">webpack-dev-server 会在本地提供一个静态文件服务器 </div><div class="line">http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/webpack-dev-server/</span></div><div class="line">同时内部也在使用webpack的watc模式自动编译更新</div><div class="line">浏览器中打开http:<span class="regexp">//</span>localhost:<span class="number">8080</span><span class="regexp">/webpack-dev-server/</span></div><div class="line">只要文件有更新 浏览器也会自动刷新页面。</div></pre></td></tr></table></figure>
<p>参考文档:<a href="http://webpack.github.io/docs/tutorials/getting-started" target="_blank" rel="external">http://webpack.github.io/docs/tutorials/getting-started</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是-webpack？&quot;&gt;&lt;a href=&quot;#什么是-webpack？&quot; class=&quot;headerlink&quot; title=&quot;什么是 webpack？&quot;&gt;&lt;/a&gt;什么是 webpack？&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;http://webpack.github.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;webpack&lt;/a&gt;是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。它就是一个前端工具，可以让我们进行各种模块加载，预处理后，再打包。任何静态资源都可以视作模块，然后模块之间也可以相互依赖，通过webpack对模块进行处理后，可以打包成我们想要的静态资源。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://zhangyake.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="webpack" scheme="http://zhangyake.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>js 深浅拷贝 &amp;&amp;  js 函数参数传递</title>
    <link href="http://zhangyake.github.io/2016/02/20/ecmascript04/"/>
    <id>http://zhangyake.github.io/2016/02/20/ecmascript04/</id>
    <published>2016-02-20T02:02:45.000Z</published>
    <updated>2017-07-26T04:42:48.029Z</updated>
    
    <content type="html"><![CDATA[<h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>我所理解的 javascript中的数组或者对象的浅拷贝 是增加了一个指向同一个内存地址的变量;由于指向的内存地址相同,改变任一变量的值,会引起另一变量跟随变化。<br><a id="more"></a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr1; <span class="comment">// 浅拷贝 （arr2与arr1指向同一个内存地址）</span></div><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = obj1;<span class="comment">// 浅拷贝（obj2与obj1指向同一个内存地址）</span></div><div class="line"><span class="comment">// 由于指向的内存地址相同 改变任一变量的值 会引起另一变量跟随变化</span></div><div class="line"><span class="built_in">console</span>.log(arr1);</div><div class="line"><span class="built_in">console</span>.log(arr2);</div><div class="line"><span class="built_in">console</span>.log(obj1);</div><div class="line"><span class="built_in">console</span>.log(obj2);</div><div class="line"><span class="comment">// 改变arr2 obj2 的属性 </span></div><div class="line">arr2[<span class="number">1</span>] = <span class="number">100</span>;</div><div class="line">obj2.a=<span class="number">2</span>;</div><div class="line"><span class="built_in">console</span>.log(arr1);</div><div class="line"><span class="built_in">console</span>.log(arr2);</div><div class="line"><span class="built_in">console</span>.log(obj1);</div><div class="line"><span class="built_in">console</span>.log(obj2);</div></pre></td></tr></table></figure>
<h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>深拷贝一般都是开辟一块新的内存地址，将原数组或者对象的各个属性逐个复制出去,新对象拥有原对象的各个属性，是两个独立的对象 ，不会互相影响。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1)); <span class="comment">//深拷贝</span></div><div class="line"><span class="built_in">console</span>.log(obj1);</div><div class="line"><span class="built_in">console</span>.log(obj2);</div><div class="line"><span class="comment">//给obj2添加属性c</span></div><div class="line">obj2.c = <span class="number">3</span>;</div><div class="line"><span class="built_in">console</span>.log(obj1);</div><div class="line"><span class="built_in">console</span>.log(obj2);</div></pre></td></tr></table></figure>
<p> JSON.parse(JSON.stringify( obj )) 进行深拷贝时 正确处理的对象只有 Number, String, Boolean, Array, 扁平对象，即那些能够被 json 直接表示的数据结构，但是坏处也显而易见，这会抛弃对象的constructor，也就是深复制之后，无论这个对象原本的构造函数是什么，在深复制之后都会变成Object</p>
<h4 id="javascript中的函数参数传递"><a href="#javascript中的函数参数传递" class="headerlink" title="javascript中的函数参数传递"></a>javascript中的函数参数传递</h4><p> 函数的参数一般包括基本类型 和 引用类型<br>对于基本类型 数字、字符串等是将它们的值传递给了函数参数，函数参数的改变不会影响函数外部的变量。<br>对于引用类型 数组和对象等是将对象(数组)的变量的值（内存地址）传递给了函数参。当<strong>函数改变这个地址指向的对象(数组)的 内容</strong> 时，同时也<strong>改变了函数外部变量指向的对象(数组)的内容</strong>；当<strong>函数改变的是变量的地址</strong>时，实际<strong>就与函数外部的变量失去了联系</strong>，变成了完全不同的对象了，<strong>不会对函数外部对象造成改变</strong>。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a1=<span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> a2=[];</div><div class="line"><span class="keyword">var</span> a3=&#123;&#125;;</div><div class="line">function <span class="function"><span class="title">fun</span><span class="params">(a1,a2,a3)</span></span>&#123;</div><div class="line">    a1=<span class="number">3</span>;</div><div class="line">    a2=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line">    a3=&#123;a:<span class="number">3</span>&#125;;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">fun</span><span class="params">(a1,a2,a3)</span></span></div><div class="line">a1  <span class="comment">// 1</span></div><div class="line">a2  <span class="comment">// []</span></div><div class="line">a3  <span class="comment">// Object &#123;&#125;</span></div></pre></td></tr></table></figure>
<p>a1、a2、a3 都没有被改变，a1 仍然是原来的数字，a2、a3 仍然是空白的数组、对象。<br><strong>js中的函数参数都是按值传递的 只是 数组、对象等按值传递，是指变量地址的值。</strong> </p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a1=<span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> a2=[];</div><div class="line"><span class="keyword">var</span> a3=&#123;&#125;;</div><div class="line">function <span class="function"><span class="title">fun</span><span class="params">(a1,a2,a3)</span></span>&#123;</div><div class="line">    a1 = <span class="number">3</span>;</div><div class="line">    a2.push(<span class="number">2</span>);</div><div class="line">    a3.a = <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line">undefined</div><div class="line"><span class="function"><span class="title">fun</span><span class="params">(a1,a2,a3)</span></span></div><div class="line">undefined</div><div class="line">a1 <span class="comment">//  1</span></div><div class="line">a2 <span class="comment">//  [2]</span></div><div class="line">a3 <span class="comment">//  Object &#123;a: 3&#125;</span></div></pre></td></tr></table></figure>
<p>外部a2、a3的值发生了改变<br>即如果不赋新值（不改变对象地址），而是在函数内部 直接对数组或者对象的内容进行操作  则会改变外部对象或数组的内容</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;浅拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝&quot;&gt;&lt;/a&gt;浅拷贝&lt;/h4&gt;&lt;p&gt;我所理解的 javascript中的数组或者对象的浅拷贝 是增加了一个指向同一个内存地址的变量;由于指向的内存地址相同,改变任一变量的值,会引起另一变量跟随变化。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhangyake.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://zhangyake.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS中的 call与apply方法 以及 bind方法</title>
    <link href="http://zhangyake.github.io/2016/01/30/ecmascript03/"/>
    <id>http://zhangyake.github.io/2016/01/30/ecmascript03/</id>
    <published>2016-01-30T06:28:25.000Z</published>
    <updated>2017-07-26T04:42:48.029Z</updated>
    
    <content type="html"><![CDATA[<p>call 与apply 类似 都是与函数相关的方法，<br>每个函数都包含这两个特殊的方法 apply( ) 和 call( )  这两个方法都是在特定的作用域中调用函数，即将函数作为对象的方法来调用。<br>调用格式:<br>function.apply(obj,args);<br><a id="more"></a></p>
<ol>
<li>apply方法有两个 参数 其中 obj 代表调用function的对象，在函数体中，obj是设置函数体内this对象的值。<br>args代表的参数是一个数组,数组中的值时传递给function的参数值。<br>function.call(obj,args. . .);</li>
<li>call方法的参数obj与apply中的类似，args. . . 则表示要绑定扫函数上的0-n个参数值,call与apply的区别就在于传递给函数的参数必须逐个列举出来<br>如果obj参数为null，则使用全局对象。<br>使用call or apply方改变函数的作用域的好处 就是对象不需要与方法有任何的耦合关系, 参数obj为不同的对象 返回值可能就随对象obj的而定</li>
</ol>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var a=<span class="number">10</span>,b=<span class="number">11</span>;</div><div class="line">function <span class="keyword">add</span><span class="bash">(x,y)&#123;</span></div><div class="line">    if(x &amp;&amp; y)&#123;</div><div class="line">        return x+y;</div><div class="line">      &#125;</div><div class="line">    return this.a + this.b;</div><div class="line">&#125;</div><div class="line">var obj=&#123;a:<span class="number">1</span>,b:<span class="number">2</span>&#125;</div><div class="line"><span class="keyword">add</span><span class="bash">();</span></div><div class="line">//<span class="number">21</span></div><div class="line"><span class="keyword">add</span><span class="bash">(2,3);</span></div><div class="line">//<span class="number">5</span></div><div class="line"><span class="keyword">add</span>.<span class="bash">call(obj);</span></div><div class="line">//<span class="number">3</span></div><div class="line"><span class="keyword">add</span>.<span class="bash">call(obj,2,4);</span></div><div class="line">//<span class="number">6</span></div><div class="line"><span class="keyword">add</span>.<span class="bash">apply(obj);</span></div><div class="line">//<span class="number">3</span></div><div class="line"><span class="keyword">add</span>.<span class="bash">apply(obj,[3,4,5]);</span></div><div class="line">//<span class="number">7</span></div></pre></td></tr></table></figure>
<ol>
<li>bind( )也是函数的一个方法,这个方法会返回一个作为方法调用的函数，其this值会被绑定到传给bind( )函数的值;</li>
</ol>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">'Jaak'</span>;</div><div class="line"><span class="keyword">var</span> word = <span class="string">'Hello'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span><span class="params">()</span></span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name+<span class="string">" say "</span>+<span class="keyword">this</span>.word);</div><div class="line"> &#125;</div><div class="line"> say();</div><div class="line"> <span class="keyword">var</span> p = &#123;name:<span class="string">'Tom'</span>,word:<span class="string">'Hi'</span>&#125;;</div><div class="line"> <span class="keyword">var</span> sayp = say.bind(p);</div><div class="line"> sayp(); <span class="comment">//chrome浏览器中运行 查看结果</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;call 与apply 类似 都是与函数相关的方法，&lt;br&gt;每个函数都包含这两个特殊的方法 apply( ) 和 call( )  这两个方法都是在特定的作用域中调用函数，即将函数作为对象的方法来调用。&lt;br&gt;调用格式:&lt;br&gt;function.apply(obj,args);&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhangyake.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://zhangyake.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS中特殊的对象arguments</title>
    <link href="http://zhangyake.github.io/2016/01/24/ecmascript02/"/>
    <id>http://zhangyake.github.io/2016/01/24/ecmascript02/</id>
    <published>2016-01-24T08:58:11.000Z</published>
    <updated>2017-07-26T04:42:48.029Z</updated>
    
    <content type="html"><![CDATA[<p><strong>arguments对象</strong><br>在函数代码中，才可使用特殊对象 arguments，arguments对象不能显式创建。函数的 arguments 对象并不是一个数组，但是访问单个参数的方式与访问数组元素的方式相同。访问函数中的第n个参数 则可以使用arguments[n-1]<br><a id="more"></a><br><strong>通过索引访问函数参数</strong><br>一个简单的add函数中实践一下arguments对象(以下代码都是在chrome浏览器中<em>非严格模式</em>运行)<br><img src="http://7xqeyw.com1.z0.glb.clouddn.com/argument1.png" alt=""><br>由上图可看出 在add函数中通过arguments访问参数的方式与访问数组元素的方式相同<br> <strong>arguments是函数中的一个对象</strong><br>对add函数进行简单修改如下图<br><img src="http://7xqeyw.com1.z0.glb.clouddn.com/argument2.png" alt=""><br>由上图运行结果 则说明arguments的确是一个对象<br><strong>arguments对象的一些属性</strong><br>再次修改add函数 查看关于arguments对象的其他属性如下图<br><img src="http://7xqeyw.com1.z0.glb.clouddn.com/argument3.png" alt=""><br>从运行结果中看到 arguments对象喊包含length 和 callee这样的属性</p>
<pre><code>arguments.length 是函数接受参数的个数（实参个数）
arguments.callee 则代表当前正在执行的函数 它可以在匿名函数中通过callee递归调用自身
</code></pre><p>图中的蓝色框线中看到 callee还包含有其他属性<br>输出arguments.callee.length长度是2 和 arguments.length 输出的3 不同</p>
<pre><code>arguments.length 是实参长度
arguments.callee.length 是形参长度
</code></pre><p>arguments.callee还有一个属性caller </p>
<pre><code>arguments.callee.caller 保存着调用当前函数的函数的引用
由于当前函数是在全局作用域中运行 所以看到 caller是null
</code></pre><p>看下图 arguments.callee.caller则是调用当前函数的函数的引用<br>修改代码 如下<br><img src="http://7xqeyw.com1.z0.glb.clouddn.com/argument4.png" alt=""><br>在outFun函数中调用add函数则arguments.callee.caller则指向了outFun函数</p>
<pre><code>关于caller  函数对象也存在一个caller属性 通函数名称调用 含义与 arguments.callee.caller 都是保存着调用当前函数的函数的引用
</code></pre><p><img src="http://7xqeyw.com1.z0.glb.clouddn.com/argument5.png" alt=""><br>上图 funName函数中输出funName.caller  在outFun函数中调用funName函数  执行outFun函数 输出的是 图中红色框线部分输出的是outFun  即调用funName函数的函数引用 </p>
<p><strong>注意</strong><br>关于使用arguments通过索引获取函数参数 在非严格模式与严格模式下 稍有不同<br>图中在<strong>非严格模式</strong>下更改 函数参数 x 的值时arguments[0]的值随其改变 同样更改arguments[0] 的值 x的值也随其改变<br>图中在<strong>严格模式</strong>下更改 函数参数 x 的值时arguments[0]的值并不会改变 同样更改arguments[0] 的值 x的值也不会随其改变<br>如图<br><img src="http://7xqeyw.com1.z0.glb.clouddn.com/argument6.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;arguments对象&lt;/strong&gt;&lt;br&gt;在函数代码中，才可使用特殊对象 arguments，arguments对象不能显式创建。函数的 arguments 对象并不是一个数组，但是访问单个参数的方式与访问数组元素的方式相同。访问函数中的第n个参数 则可以使用arguments[n-1]&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://zhangyake.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://zhangyake.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript类型转换</title>
    <link href="http://zhangyake.github.io/2015/12/19/ecmascript01/"/>
    <id>http://zhangyake.github.io/2015/12/19/ecmascript01/</id>
    <published>2015-12-19T12:59:54.000Z</published>
    <updated>2017-07-26T04:42:48.026Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、类型介绍"><a href="#一、类型介绍" class="headerlink" title="一、类型介绍"></a>一、类型介绍</h4><p> JavaScript中，共有6种类型，其中5种是基本类型，1种复杂类型。<br>   基本类型：number、boolean、string、null、undefined<br>   复杂类型：Object<br>   5种基本类型中，处理null、undefined外都有相应的包装类。<br>   除了5种基本类型之外，所有的类型都是Object类型的。<br>   typeof操作符是JavaScript中用以判断类型的操作符，返回6种全小写的字符串，分别是’number’、’boolean’、’string’ 、’null’、’undefined’。<br>   其次 还有数组Array类型 实质上也是Object类型<a id="more"></a><br>   其中null类型和Object类型的都返回’object’，function也是Object类型的，但是由于其在JavaScript中的特殊性，所以有必要单独区分！<br>   typeof操作的执行结果：<br> <img src="/2015/12/19/ecmascript01/typeof.png" alt="This is an example image" title="This is an example image"></p>
<h4 id="二、其他类型转boolean"><a href="#二、其他类型转boolean" class="headerlink" title="二、其他类型转boolean"></a>二、其他类型转boolean</h4><p> <strong>Boolean() 引起的转型</strong><br>   规则是：</p>
<ul>
<li>非0数字（含Infinity） –&gt; true</li>
<li>Object对象            –&gt; true</li>
<li>非空字符串            –&gt; true</li>
<li>0/NaN                –&gt; false</li>
<li>null                 –&gt; false</li>
<li>undefined            –&gt; false</li>
<li>‘’                   –&gt; false</li>
</ul>
 <img src="/2015/12/19/ecmascript01/boolean.png" alt="This is an example image" title="This is an example image">
<p><strong>!! 引起的转型</strong></p>
<p>与使用Boolean()一致<br> <img src="/2015/12/19/ecmascript01/!!.png" alt="This is an example image" title="This is an example image"></p>
<p><strong>! 引起的转型</strong></p>
 
<p><strong>if()引起的转型</strong></p>
 <img src="/2015/12/19/ecmascript01/if.png" alt="This is an example image" title="This is an example image">
<p><strong>&amp;&amp; 和 || 引起的转型</strong><br>包含两种情况：<br> a、两边确实是boolean，经过逻辑运算，返回相应的值。</p>
<pre><code>true &amp;&amp; false --&gt; false，
true || false --&gt; true
</code></pre><p> b、两边不是boolean<br> 下列写法，大家肯定会常常见到。</p>
<pre><code>var t = a &amp;&amp; b ； //相当于 var t = a ? b : a;
return a &amp;&amp; b； //相当于 return a ? b : a;
a &amp;&amp; test()； //相当于 a ? test() : null;
var t = a || b ;  //相当于 var t = a ? a : b;
</code></pre><h4 id="三、其它类型转number"><a href="#三、其它类型转number" class="headerlink" title="三、其它类型转number"></a>三、其它类型转number</h4><p>转number共有3个函数：Number()、parseInt()、parseFloat()</p>
<pre><code>1、Number()引起的转型 
     规则是：
           true   --&gt; 1
           false  --&gt; 0

          如果字符串中只包含数字  如&apos;123&apos; --&gt; 123
          如果字符串中包含有效的浮点数字  如&apos;123.99&apos; --&gt;123.99
          如果字符串是有效的十六进制数字  如&apos;0xFF&apos;  --&gt; 255
          如果字符串是空串 &apos;&apos; --&gt; 0
          如果字符串包含上述格式之外字符  如&apos;123a&apos;  --&gt; NaN
          如果是对象 则调用对象的valueOf方法，然后按照上述规则进行转换，
             如果没有valueOf方法，则调用对象的toString方法，然后按照上述规则进行转换。
             如果valueOf和toString都存在，则调用valueOf方法！！！

        注意：Number会忽略前导0

2、parseInt/parseFloat引起的转型
    规则是：
         null,  undefined,  &apos;&apos;, true, false  --&gt; NaN
         如果字符串中只包含数字  如 &apos;123&apos; --&gt; 123
         如果字符串中包含有效的浮点数字  如&apos;123.99&apos;  parseInt --&gt; 123, parseFloat --&gt; 123.99
         如果字符串是有效的十六进制数字  如
                    parseInt    &apos;0xFF&apos;  --&gt; 255
                    parseFloat  &apos;0xFF&apos; --&gt; 0
         解析字符串，直到某个字符不是数字为止 
                    parseInt    &apos;123a&apos; --&gt; 123 
                    parseFloat   &apos;123.3a&apos; --&gt; &apos;123.3&apos; 

        如果参数是Object类型，会调用toString()方法。注意：并不会调用valueOf方法！！！

3、+, - ,*, /,%, ++, -- 都会引起类型转换，转换规则同1。
</code></pre><h4 id="四、其它类型转string"><a href="#四、其它类型转string" class="headerlink" title="四、其它类型转string"></a>四、其它类型转string</h4><p> 1、String()引起的转型</p>
<pre><code>  规则是：

      如果值有toString()方法，则调用该方法(无参数)，并返回相应的结果
      如果值是null，则返回&apos;null&apos;
      如果值是undefined， 返回&apos;undefined&apos;

2、+ &apos;&apos; 引起的转型，规则同1。如
               var str = null + &apos;&apos;     //  &apos;null&apos;
               var str = undefined + &apos;&apos;    // &apos;undefined&apos; 
               var str = {toString:function(){return &apos;i am a object&apos;}} + &apos;&apos; // &apos;i am a object&apos;
</code></pre><h4 id="五、包装类型"><a href="#五、包装类型" class="headerlink" title="五、包装类型"></a>五、包装类型</h4><pre><code>var num = new Number(123)
转型规则同Number()
var bool = new Boolean(true)
转型规则同Boolean()
var str   = new String(&apos;123a&apos;)
转型规则同String()
</code></pre><p>   <strong>包装类型转换大招：</strong></p>
<pre><code>var val = Object(arg)
如果arg是Object类型，原样返回
如果arg是number，boolean，string，则返回相应的包装实例
如果arg是null，undefined，则返回 {}
注意：var val = new Object(arg) 跟不带new的结果一致！！！
</code></pre><h4 id="六、toString-和-valueOf-调用问题"><a href="#六、toString-和-valueOf-调用问题" class="headerlink" title="六、toString() 和 valueOf() 调用问题"></a>六、toString() 和 valueOf() 调用问题</h4><pre><code> +,-,*,/,%,++,--,Number,isNaN,isFinite
    会导致这两个方法被调用，valueOf存在就调用valueOf，不存在就调用toString，两者都存在，调用valueOf

parseInt/parseFloat/String()
    会导致toString方法被调用。。并不会调用valueOf！！！
</code></pre><h4 id="七、-gt-、-gt-、-lt-、-lt-引起的转换"><a href="#七、-gt-、-gt-、-lt-、-lt-引起的转换" class="headerlink" title="七、&gt;、&gt;=、&lt;、&lt;=引起的转换"></a>七、&gt;、&gt;=、&lt;、&lt;=引起的转换</h4><p>规则是：</p>
<pre><code>如果两个操作数都是数值，则执行数值比较

如果两个操作数都是字符串，则比较两个字符串对应的字符编码值

如果一个操作数是数值，则将另外一个操作数转换成一个数值，然后执行比较 如 2 &gt; &apos;1&apos; ，会把&apos;1&apos; 转成 1，然后和2比较

如果一个操作数是对象，则调用这个对象的valueOf方法，用得到的结果，按照前3条的规则转换之后执行比较，如果对象没有valueOf方法，则调用toString方法，用得到的结果，按照前3条的规则转换之后执行 比较。
如果一个操作数是boolean值，则先将七转换为数值，然后执行比较。true --&gt; 1、false --&gt; 0。
</code></pre><h4 id="八、-引起的转型"><a href="#八、-引起的转型" class="headerlink" title="八、== 引起的转型"></a>八、== 引起的转型</h4><p>   规则是：</p>
<pre><code>如果有一个操作数是NaN，马上返回false。

如果有一个操作数是boolean值，则在比较相等性之前，先转成数值，false转0，true转1。

如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转为数值。

   如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf方法，用得到的基本类型值按照前面的规则进行比较。
null == undefined --&gt; true

如果两个操作数是对象，则比较它们是不是同一个对象，如果两个操作数都指向同一个对象，则相等操作符返回true，否则，返回false
</code></pre><p>   参考原文：<a href="http://www.imooc.com/article/2382" target="_blank" rel="external">http://www.imooc.com/article/2382</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、类型介绍&quot;&gt;&lt;a href=&quot;#一、类型介绍&quot; class=&quot;headerlink&quot; title=&quot;一、类型介绍&quot;&gt;&lt;/a&gt;一、类型介绍&lt;/h4&gt;&lt;p&gt; JavaScript中，共有6种类型，其中5种是基本类型，1种复杂类型。&lt;br&gt;   基本类型：number、boolean、string、null、undefined&lt;br&gt;   复杂类型：Object&lt;br&gt;   5种基本类型中，处理null、undefined外都有相应的包装类。&lt;br&gt;   除了5种基本类型之外，所有的类型都是Object类型的。&lt;br&gt;   typeof操作符是JavaScript中用以判断类型的操作符，返回6种全小写的字符串，分别是’number’、’boolean’、’string’ 、’null’、’undefined’。&lt;br&gt;   其次 还有数组Array类型 实质上也是Object类型
    
    </summary>
    
      <category term="前端" scheme="http://zhangyake.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://zhangyake.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>redis命令学习(三)</title>
    <link href="http://zhangyake.github.io/2015/11/28/redis03/"/>
    <id>http://zhangyake.github.io/2015/11/28/redis03/</id>
    <published>2015-11-28T08:25:12.000Z</published>
    <updated>2017-07-26T04:42:48.110Z</updated>
    
    <content type="html"><![CDATA[<h4 id="有序集合-ZSet-操作命令"><a href="#有序集合-ZSet-操作命令" class="headerlink" title="有序集合(ZSet)操作命令"></a>有序集合(ZSet)操作命令</h4><p>　　Redis 有序集合与普通集合非常相似，是一个没有重复元素的字符串集合。不同之处是有序集合的每个成员都关联了一个评分，这个评分被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但评分可以重复。<br><a id="more"></a><br>　　使用有序集合你可以以非常快的速度添加、删除和更新元素。因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。<br>　　访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。在有序集合中，你可以很快捷的访问一切你需要的东西：有序的元素，快速的存在性测试，快速访问集合的中间元素！ 简而言之使用有序集合你可以做完成许多对性能有极端要求的任务，而那些任务使用其他类型的数据库真的是很难完成的。</p>
<h4 id="ZADD-命令-添加成员"><a href="#ZADD-命令-添加成员" class="headerlink" title="ZADD 命令 - 添加成员"></a>ZADD 命令 - 添加成员</h4><p>在redis中，使用ZADD命令将一个或多个 member 元素及其 score 值加入到有序集 key 当中<br>基本语法：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZADD <span class="built_in">key</span> score <span class="built_in">member</span> [[score <span class="built_in">member</span>] [score <span class="built_in">member</span>] ...]</div></pre></td></tr></table></figure></p>
<p>示例 - 添加google.com,baidu.com,sougou.com到website集合，评分5 , 4 , 3。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZADD</span> <span class="selector-tag">website</span> 5 <span class="selector-tag">google</span><span class="selector-class">.com</span> 4 <span class="selector-tag">baidu</span><span class="selector-class">.com</span> 3 <span class="selector-tag">sougou</span><span class="selector-class">.com</span>                      </div><div class="line">(<span class="selector-tag">integer</span>) 3</div></pre></td></tr></table></figure></p>
<p>如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该 member 在正确的位置上。<br>score 值可以是整数值或双精度浮点数。<br>如果 key 不存在，则创建一个空的有序集并执行ZADD操作。<br>当 key 存在但不是有序集类型时，返回一个错误。</p>
<h4 id="ZRANGE命令-获取指定区域成员"><a href="#ZRANGE命令-获取指定区域成员" class="headerlink" title="ZRANGE命令 - 获取指定区域成员"></a>ZRANGE命令 - 获取指定区域成员</h4><p>如果想要获取集合成员，可以使用ZRANGE命令<br>基本语法：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZRANGE key <span class="literal">start</span> <span class="literal">stop</span> [WITHSCORES]</div></pre></td></tr></table></figure></p>
<p>示例 - 获取website集合的全部成员。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> ZRANGE website <span class="number">0</span> -<span class="number">1</span> WITHSCORES  <span class="comment"># 显示整个有序集成员                                      </span></div><div class="line"><span class="number">1</span>) <span class="string">"sougou.com"</span>                                                                </div><div class="line"><span class="number">2</span>) <span class="string">"3"</span>                                                           </div><div class="line"><span class="number">3</span>) <span class="string">"baidu.com"</span>                                                                 </div><div class="line"><span class="number">4</span>) <span class="string">"4"</span>                  </div><div class="line"><span class="number">5</span>) <span class="string">"google.com"</span></div><div class="line"><span class="number">6</span>) <span class="string">"5"</span></div></pre></td></tr></table></figure></p>
<p>返回的成员的位置按 score 值递增(从小到大)来排序。</p>
<h4 id="ZSCORE命令-获取成员评分"><a href="#ZSCORE命令-获取成员评分" class="headerlink" title="ZSCORE命令 - 获取成员评分"></a>ZSCORE命令 - 获取成员评分</h4><p>redis中使用ZSCORE命令来获取成员评分<br>基本语法：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZSCORE <span class="built_in">key</span> <span class="built_in">member</span></div></pre></td></tr></table></figure></p>
<p>示例 - 获取集合website中元素google.com的评分。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZSCORE</span> <span class="selector-tag">website</span> <span class="selector-tag">google</span><span class="selector-class">.com</span>  # 注意返回值是字符串</div><div class="line">"5"</div></pre></td></tr></table></figure></p>
<p>如果 google.com 是集合 website 的成员，则返回成员 google.com 的评分值。<br>如果 google.com 元素不是有序集 website 的成员，或 website 不存在，则返回 nil 。</p>
<h4 id="ZREM命令-移除成员"><a href="#ZREM命令-移除成员" class="headerlink" title="ZREM命令 - 移除成员"></a>ZREM命令 - 移除成员</h4><p>ZREM命令可以移除指定成员<br>基本语法：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZREM <span class="built_in">key</span> <span class="built_in">member</span> [<span class="built_in">member</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例 - 移除website集合中google.com元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZREM</span> <span class="selector-tag">website</span> <span class="selector-tag">google</span><span class="selector-class">.com</span>    </div><div class="line">(<span class="selector-tag">integer</span>) 1</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZRANGE</span> <span class="selector-tag">website</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">WITHSCORES</span>   #显示没有<span class="selector-tag">google</span><span class="selector-class">.com</span> </div><div class="line">1) "<span class="selector-tag">sougou</span><span class="selector-class">.com</span>"   </div><div class="line">2) "3" </div><div class="line">3) "<span class="selector-tag">baidu</span><span class="selector-class">.com</span>"                      </div><div class="line">4) "4"</div></pre></td></tr></table></figure></p>
<p>执行成功，google.com元素将从website集合中移除，如果google.com不存在，将被忽略。<br>如果 website 集合存在但不是有序集类型时，返回一个错误。</p>
<h4 id="ZCARD命令-获取成员数量"><a href="#ZCARD命令-获取成员数量" class="headerlink" title="ZCARD命令 - 获取成员数量"></a>ZCARD命令 - 获取成员数量</h4><p>如果需要查看集合成员的数量，那么我们需要使用到ZCARD命令<br>基本语法：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ZCARD key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 查看website集合的成员数量。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZCARD</span> <span class="selector-tag">website</span></div><div class="line">(<span class="selector-tag">integer</span>) 2</div></pre></td></tr></table></figure></p>
<p>执行成功，将返回有序集 website 的成员总数。</p>
<h4 id="ZCOUNT命令-获取评分区域成员数量"><a href="#ZCOUNT命令-获取评分区域成员数量" class="headerlink" title="ZCOUNT命令 - 获取评分区域成员数量"></a>ZCOUNT命令 - 获取评分区域成员数量</h4><p>除了ZCARD命令以外，ZCOUNT命令也可以查看成员的数量，和前者不同的是，ZCOUNT命令可以设定评分的最小和最大值<br>基本语法：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZCOUNT <span class="built_in">key</span> <span class="built_in">min</span> <span class="built_in">max</span></div></pre></td></tr></table></figure></p>
<p>示例 - 查看评分在4-5之间的website。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZCOUNT</span> <span class="selector-tag">salary</span> 4 5  </div><div class="line">(<span class="selector-tag">integer</span>) 1</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZRANGE</span> <span class="selector-tag">website</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">WITHSCORES</span>   # <span class="selector-tag">baidu</span><span class="selector-class">.com</span> 4        </div><div class="line">1) "<span class="selector-tag">sougou</span><span class="selector-class">.com</span>" </div><div class="line">2) "3" </div><div class="line">3) "<span class="selector-tag">baidu</span><span class="selector-class">.com</span>"   </div><div class="line">4) "4"</div></pre></td></tr></table></figure></p>
<p>执行成功，将返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量。</p>
<h4 id="ZRANK命令-排名"><a href="#ZRANK命令-排名" class="headerlink" title="ZRANK命令 - 排名"></a>ZRANK命令 - 排名</h4><p>ZRANK命令可以获取到给定元素在集合中的排名，排名依据 评分（score） 值递增(从小到大)顺序排列<br>基本语法：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZRANK <span class="built_in">key</span> <span class="built_in">member</span></div></pre></td></tr></table></figure></p>
<p>示例 - 显示 baidu.com 的评分排名。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZRANGE</span> <span class="selector-tag">website</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">WITHSCORES</span>                          </div><div class="line">1) "<span class="selector-tag">sougou</span><span class="selector-class">.com</span>"                                                    </div><div class="line">2) "3" </div><div class="line">3) "<span class="selector-tag">baidu</span><span class="selector-class">.com</span>"                                                   </div><div class="line">4) "4"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZRANK</span> <span class="selector-tag">website</span> <span class="selector-tag">baidu</span><span class="selector-class">.com</span> </div><div class="line">(<span class="selector-tag">integer</span>) 1</div></pre></td></tr></table></figure>
<p>排名以 0 为底，也就是说， score 值最小的成员排名为 0 。<br>使用 ZREVRANK 命令可以获得成员按 score 值递减(从大到小)排列的排名。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZREVRANK</span> <span class="selector-tag">website</span> <span class="selector-tag">baidu</span><span class="selector-class">.com</span>     </div><div class="line">(<span class="selector-tag">integer</span>) 0                                </div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">ZRANGE</span> <span class="selector-tag">website</span> 0 <span class="selector-tag">-1</span> <span class="selector-tag">WITHSCORES</span>        </div><div class="line">1) "<span class="selector-tag">sougou</span><span class="selector-class">.com</span>"                                            </div><div class="line">2) "3"                                   </div><div class="line">3) "<span class="selector-tag">baidu</span><span class="selector-class">.com</span>"                  </div><div class="line">4) "4"</div></pre></td></tr></table></figure></p>
<h4 id="ZINCRBY-命令-增量"><a href="#ZINCRBY-命令-增量" class="headerlink" title="ZINCRBY 命令 - 增量"></a>ZINCRBY 命令 - 增量</h4><p>ZINCRBY命令可以为给定的成员评分值加上增量<br>语法格式：<br><strong>ZINCRBY key increment member</strong><br>示例 - 为website集合中的baidu.com加分5。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> ZRANGE website <span class="number">0</span> -<span class="number">1</span> WITHSCORES                                  </div><div class="line"><span class="number">1</span>) <span class="string">"sougou.com"</span>                                            </div><div class="line"><span class="number">2</span>) <span class="string">"3"</span>                                                           </div><div class="line"><span class="number">3</span>) <span class="string">"baidu.com"</span>                                                         </div><div class="line"><span class="number">4</span>) <span class="string">"4"</span>  <span class="comment"># 原来 4</span></div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> ZINCRBY website <span class="number">5</span> baidu.com   <span class="comment"># 加分5                       </span></div><div class="line"><span class="string">"9"</span></div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> ZRANGE website <span class="number">0</span> -<span class="number">1</span> WITHSCORES      </div><div class="line"><span class="number">1</span>) <span class="string">"sougou.com"</span>                                                </div><div class="line"><span class="number">2</span>) <span class="string">"3"</span>                                                          </div><div class="line"><span class="number">3</span>) <span class="string">"baidu.com"</span>                                                    </div><div class="line"><span class="number">4</span>) <span class="string">"9"</span>   <span class="comment"># 加后 9</span></div></pre></td></tr></table></figure></p>
<p>可以通过传递一个负数值 increment ，让 score 减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的 score 值减去 5 。<br>当 key 不存在，或 member 不是 key 的成员时， ZINCRBY key increment member 等同于 ZADD key increment member 。<br>当 key 不是有序集类型时，返回一个错误。<br>score 值可以是整数值或双精度浮点数。</p>
<h3 id="Key相关命令"><a href="#Key相关命令" class="headerlink" title="Key相关命令"></a>Key相关命令</h3><h4 id="KEYS命令-查找键"><a href="#KEYS命令-查找键" class="headerlink" title="KEYS命令 - 查找键"></a>KEYS命令 - 查找键</h4><p>Redis 的keys命令用于管理键。使用 Redis 的keys命令,查找所有符合给定模式 pattern 的 key 。<br>语法格式：<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">KEYS <span class="built_in">pattern</span></div></pre></td></tr></table></figure></p>
<p>示例 - 查找包含a的键。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">MSET</span> <span class="selector-tag">name</span> "<span class="selector-tag">zhang</span>" <span class="selector-tag">age</span> 24 <span class="selector-tag">sex</span> 1   #设置三个键值对                                             </div><div class="line"><span class="selector-tag">OK</span>                                                                             </div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">KEYS</span> *<span class="selector-tag">a</span>*                                                       </div><div class="line">1) "<span class="selector-tag">age</span>"                                                              </div><div class="line">2) "<span class="selector-tag">name</span>"</div></pre></td></tr></table></figure></p>
<p>KEYS <em> 匹配数据库中所有 key 。<br>KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。<br>KEYS h</em>llo 匹配 hllo 和 heeeeello 等。<br>KEYS h[ae]llo 匹配 hello 和 hallo 。<br>特殊符号用 \ 隔开。</p>
<h4 id="EXISTS命令-判断key是否存在"><a href="#EXISTS命令-判断key是否存在" class="headerlink" title="EXISTS命令 - 判断key是否存在"></a>EXISTS命令 - 判断key是否存在</h4><p>EXISTS命令的作用是判断指定key是否存在<br>语法格式：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">EXISTS key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 判断age是否存在。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">MSET</span> <span class="selector-tag">name</span> "<span class="selector-tag">zhang</span>" <span class="selector-tag">age</span> 24 <span class="selector-tag">sex</span> 1                         </div><div class="line"><span class="selector-tag">OK</span>                                         </div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">EXISTS</span> <span class="selector-tag">age</span>                                                    </div><div class="line">(<span class="selector-tag">integer</span>) 1</div></pre></td></tr></table></figure></p>
<p>若 key 存在，返回 1 ，否则返回 0 </p>
<h4 id="MOVE命令-移动key"><a href="#MOVE命令-移动key" class="headerlink" title="MOVE命令 - 移动key"></a>MOVE命令 - 移动key</h4><p>MOVE命令的作用是将当前数据库的 key 移动到给定的数据库 db 当中<br>语法如下：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">MOVE</span> key <span class="keyword">db</span></div></pre></td></tr></table></figure></p>
<p>如果当前数据库(源数据库)和给定数据库(目标数据库)有相同名字的给定 key ，或者 key 不存在于当前数据库，那么 MOVE 没有任何效果。<br>因此，也可以利用这一特性，将 MOVE 当作锁(locking)原语(primitive)。<br>示例 - 将数据库0中的age，移动到数据库1。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SELECT</span> 0   </div><div class="line"># <span class="selector-tag">redis</span>默认使用数据库0，为了清晰起见，这里再显式指定一次                       </div><div class="line"><span class="selector-tag">OK</span>                                       </div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">MOVE</span> <span class="selector-tag">age</span> 1                               </div><div class="line">(<span class="selector-tag">integer</span>) 1  </div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">EXISTS</span> <span class="selector-tag">age</span>                                                 </div><div class="line">(<span class="selector-tag">integer</span>) 0                                                                    </div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SELECT</span> 1                                                  </div><div class="line"><span class="selector-tag">OK</span>                                                                             </div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span><span class="selector-attr">[1]</span>&gt; <span class="selector-tag">EXISTS</span> <span class="selector-tag">age</span>   </div><div class="line">#注意命令提示符变成127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span><span class="selector-attr">[1]</span> 表明正在使用数据库 1                                                                   </div><div class="line">(<span class="selector-tag">integer</span>) 1</div></pre></td></tr></table></figure></p>
<h4 id="RENAME命令-重命名"><a href="#RENAME命令-重命名" class="headerlink" title="RENAME命令 - 重命名"></a>RENAME命令 - 重命名</h4><p>RENAME命令可以将原有的 key 修改为新的key名称<br>语法如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">RENAME</span> <span class="keyword">key</span> newkey</div></pre></td></tr></table></figure></p>
<p>示例 - 重命名name 为 lastname。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">GET</span>  <span class="selector-tag">name</span>     # 获取当前<span class="selector-tag">name</span>的值  </div><div class="line">"<span class="selector-tag">zhang</span>"                                                                        </div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">RENAME</span> <span class="selector-tag">name</span> <span class="selector-tag">lastname</span> # 重命名<span class="selector-tag">name</span> 为 <span class="selector-tag">lastname</span>            </div><div class="line"><span class="selector-tag">OK</span>                                                                             </div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">GET</span> <span class="selector-tag">name</span>   # 获取当前<span class="selector-tag">name</span>的值 已经不存在                       </div><div class="line">(<span class="selector-tag">nil</span>)</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">GET</span> <span class="selector-tag">lastname</span>                                                   </div><div class="line">"<span class="selector-tag">zhang</span>"</div></pre></td></tr></table></figure></p>
<p>当 key 和 newkey 相同，或者 key 不存在时，返回一个错误。<br>当 newkey 已经存在时， RENAME 命令将覆盖旧值。</p>
<h4 id="SORT命令-排序"><a href="#SORT命令-排序" class="headerlink" title="SORT命令 - 排序"></a>SORT命令 - 排序</h4><p>排序是很常见的需求，在 redis 中可以使用SORT命令来实现排序<br>语法格式：<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SORT key <span class="comment">[BY pattern]</span> <span class="comment">[LIMIT offset count]</span> <span class="comment">[GET pattern <span class="comment">[GET pattern ...]</span>]</span> <span class="comment">[ASC | DESC]</span> <span class="comment">[ALPHA]</span> <span class="comment">[STORE destination]</span></div></pre></td></tr></table></figure></p>
<p>示例 对一个number列表排序<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> LPUSH number <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">9</span> <span class="number">1</span> <span class="number">3</span> <span class="number">8</span>                               </div><div class="line">(integer) <span class="number">7</span>                                                                    </div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> SORT number                                                    </div><div class="line"><span class="number">1</span>) <span class="string">"1"</span>                                                                         </div><div class="line"><span class="number">2</span>) <span class="string">"2"</span>                                                                         </div><div class="line"><span class="number">3</span>) <span class="string">"3"</span>                                         </div><div class="line"><span class="number">4</span>) <span class="string">"5"</span>    </div><div class="line"><span class="number">5</span>) <span class="string">"6"</span>     </div><div class="line"><span class="number">6</span>) <span class="string">"8"</span> </div><div class="line"><span class="number">7</span>) <span class="string">"9"</span></div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> SORT number DESC   </div><div class="line"><span class="number">1</span>) <span class="string">"9"</span>            </div><div class="line"><span class="number">2</span>) <span class="string">"8"</span>    </div><div class="line"><span class="number">3</span>) <span class="string">"6"</span>   </div><div class="line"><span class="number">4</span>) <span class="string">"5"</span></div><div class="line"><span class="number">5</span>) <span class="string">"3"</span></div><div class="line"><span class="number">6</span>) <span class="string">"2"</span></div><div class="line"><span class="number">7</span>) <span class="string">"1"</span></div></pre></td></tr></table></figure></p>
<p>使用SORT命令，可以返回或保存给定列表、集合、有序集合 key 中经过排序的元素。<br>排序默认以数字作为对象，值被解释为双精度浮点数，然后进行比较。</p>
<h4 id="DUMP命令-序列化"><a href="#DUMP命令-序列化" class="headerlink" title="DUMP命令 - 序列化"></a>DUMP命令 - 序列化</h4><p>redis 支持序列化，使用DUMP命令来序列化给定key的值<br>语法如下：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">DUMP key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 序列化name。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SET</span> <span class="selector-tag">name</span> "<span class="selector-tag">jaak</span>"</div><div class="line"><span class="selector-tag">OK</span></div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">GET</span> <span class="selector-tag">name</span></div><div class="line">"<span class="selector-tag">jaak</span>"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">DUMP</span> <span class="selector-tag">name</span></div><div class="line">"\<span class="selector-tag">x00</span>\<span class="selector-tag">x04jaak</span>\<span class="selector-tag">x06</span>\<span class="selector-tag">x00</span>\<span class="selector-tag">x02</span>\<span class="selector-tag">xd6</span>\<span class="selector-tag">xed3n</span>\<span class="selector-tag">x91d</span>\<span class="selector-tag">xe5</span>"</div></pre></td></tr></table></figure></p>
<p>执行DUMP命令序列化成功后，将返回被序列化的值，若key不存在，则返回 nil 。</p>
<h4 id="EXPIRE命令-设置生存时间"><a href="#EXPIRE命令-设置生存时间" class="headerlink" title="EXPIRE命令 - 设置生存时间"></a>EXPIRE命令 - 设置生存时间</h4><p>为key设置生存时间需要使用EXPIRE命令<br>语法格式：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">EXPIRE key seconds</span></div></pre></td></tr></table></figure></p>
<p>示例 - 设置name的过期时间为20秒。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">GET</span> <span class="selector-tag">name</span></div><div class="line">"<span class="selector-tag">jaak</span>" </div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">EXPIRE</span> <span class="selector-tag">name</span> 20</div><div class="line">(<span class="selector-tag">integer</span>) 1</div><div class="line"> # 20秒后执行</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">GET</span> <span class="selector-tag">name</span></div><div class="line">(<span class="selector-tag">nil</span>)</div></pre></td></tr></table></figure></p>
<p>为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删除。<br>在 Redis 中，带有生存时间的 key 被称为『易失的』(volatile)。</p>
<p>生存时间可以通过使用 DEL 命令来删除整个 key 来移除，或者被 SET 和 GETSET 命令覆写(overwrite)，这意味着，如果一个命令只是修改(alter)一个带生存时间的 key 的值而不是用一个新的 key 值来代替(replace)它的话，那么生存时间不会被改变。</p>
<h4 id="TTL命令-获取剩余生存时间"><a href="#TTL命令-获取剩余生存时间" class="headerlink" title="TTL命令 - 获取剩余生存时间"></a>TTL命令 - 获取剩余生存时间</h4><p>TTL命令的作用是获取给定 key 剩余生存时间(TTL, time to live)<br>语法格式：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">TTL  key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 查看key剩余生存时间。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">EXPIRE</span> <span class="selector-tag">sex</span> 1000</div><div class="line">(<span class="selector-tag">integer</span>) 1</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">TTL</span> <span class="selector-tag">key</span></div><div class="line">(<span class="selector-tag">integer</span>) 996</div></pre></td></tr></table></figure></p>
<p>当 key 不存在时，返回 -2 。 当 key 存在但没有设置剩余生存时间时，返回 -1 。 否则，以秒为单位，返回 key 的剩余生存时间</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;有序集合-ZSet-操作命令&quot;&gt;&lt;a href=&quot;#有序集合-ZSet-操作命令&quot; class=&quot;headerlink&quot; title=&quot;有序集合(ZSet)操作命令&quot;&gt;&lt;/a&gt;有序集合(ZSet)操作命令&lt;/h4&gt;&lt;p&gt;　　Redis 有序集合与普通集合非常相似，是一个没有重复元素的字符串集合。不同之处是有序集合的每个成员都关联了一个评分，这个评分被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但评分可以重复。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://zhangyake.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="http://zhangyake.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis命令学习(二)</title>
    <link href="http://zhangyake.github.io/2015/11/27/redis02/"/>
    <id>http://zhangyake.github.io/2015/11/27/redis02/</id>
    <published>2015-11-27T07:45:51.000Z</published>
    <updated>2017-07-26T04:42:48.110Z</updated>
    
    <content type="html"><![CDATA[<h4 id="列表-Lists-操作命令"><a href="#列表-Lists-操作命令" class="headerlink" title="列表(Lists)操作命令"></a>列表(Lists)操作命令</h4><p>　　Redis列表是简单的字符串列表，按照插入顺序排序。<br><a id="more"></a><br>你可以添加一个元素导列表的头部（左边）或者尾部（右边）LPUSH命令插入一个新的元素导头部,而RPUSH插入一个新元素导尾部.当一个这两个操作在一个空的Key上被执行的时候一个新的列表被创建。相似的，如果一个列表操作清空一个列表那么对应的key将被从key空间删除。这是非常方便的语义，因为他们被调用使用一个空列表完全就像他们被调用时使用一个不存在的键值（可以）做为参数</p>
<h4 id="LPUSH命令-添加元素"><a href="#LPUSH命令-添加元素" class="headerlink" title="LPUSH命令 - 添加元素"></a>LPUSH命令 - 添加元素</h4><p>LPUSH的作用是将一个或多个值 value 插入到列表 key 的<strong>表头</strong><br>基本语法：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LPUSH <span class="built_in">key</span> <span class="built_in">value</span> [<span class="built_in">value</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例：将java添加到语言列表。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">LPUSH</span> <span class="selector-tag">languages</span> "<span class="selector-tag">java</span>"</div><div class="line">(<span class="selector-tag">integer</span>) 1</div></pre></td></tr></table></figure></p>
<p>如果有多个 value 值，那么各个 value 值按从左到右的顺序依次插入到表头,比如说，对空列表 mylist 执行命令 LPUSH mylist a b c ，列表的值将是 c b a 。<br>如果 key 不存在，一个空列表会被创建并执行LPUSH操作。<br>执行成功时，返回列表长度，当 key 存在但不是列表类型时，返回一个错误。</p>
<h4 id="LSET命令-设置指定位置元素"><a href="#LSET命令-设置指定位置元素" class="headerlink" title="LSET命令 - 设置指定位置元素"></a>LSET命令 - 设置指定位置元素</h4><p>LSET可以将列表 key 下标为index的元素的值设置为 value<br>基本语法：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LSET key <span class="built_in">index</span> <span class="built_in">value</span></div></pre></td></tr></table></figure></p>
<p>示例<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">LSET</span> <span class="selector-tag">languages</span> 0 "<span class="selector-tag">nodejs</span>"</div><div class="line"><span class="selector-tag">OK</span></div></pre></td></tr></table></figure></p>
<p>需要注意的是，列表 key 必须是已存在的，而且index不能超出列表长度范围。</p>
<h4 id="LINDEX命令-获取指定位置元素"><a href="#LINDEX命令-获取指定位置元素" class="headerlink" title="LINDEX命令 - 获取指定位置元素"></a>LINDEX命令 - 获取指定位置元素</h4><p>如果要获取列表元素，LINDEX命令是比较常用的，使用LINDEX，我们可以获取到指定位置的 value<br>基本语法：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LINDEX key <span class="keyword">index</span></div></pre></td></tr></table></figure></p>
<p>示例 - 获取languages的第一个元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">LINDEX</span> <span class="selector-tag">languages</span> 0</div><div class="line">"<span class="selector-tag">nodejs</span>"</div></pre></td></tr></table></figure></p>
<p>下标 (index)为正数时，0表示第一个元素，1表示第二个元素，以此类推。<br>下标 可以是负数，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</p>
<h4 id="LPOP命令-取出元素"><a href="#LPOP命令-取出元素" class="headerlink" title="LPOP命令 - 取出元素"></a>LPOP命令 - 取出元素</h4><p>LPOP命令执行时会移除列表第一个元素，并将其返回<br>基本语法：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">LPOP key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 取出languages中的第一个元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">LPOP</span> <span class="selector-tag">languages</span></div><div class="line">"<span class="selector-tag">nodejs</span>"</div></pre></td></tr></table></figure></p>
<p>请注意，LPOP命令会移除列表中的元素，如果仅仅是想要获取该元素，那么就不应该使用LPOP操作，因为redis中有专门获取元素的命令。</p>
<h4 id="LINSERT命令-插入元素"><a href="#LINSERT命令-插入元素" class="headerlink" title="LINSERT命令 - 插入元素"></a>LINSERT命令 - 插入元素</h4><p>插入元素是一个必要功能，LINSERT可以将值 value 插入到列表 key 当中，位于值 pivot 之前或之后<br>基本语法：<br>LINSERT key BEFORE|AFTER pivot value<br>示例 - 将node插入到JS之前。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">LPUSH</span> <span class="selector-tag">languages</span> "<span class="selector-tag">java</span>" "<span class="selector-tag">JS</span>"</div><div class="line">(<span class="selector-tag">integer</span>) 2</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">LINSERT</span> <span class="selector-tag">languages</span> <span class="selector-tag">BEFORE</span> "<span class="selector-tag">JS</span>" "<span class="selector-tag">node</span>"</div><div class="line">(<span class="selector-tag">integer</span>) 3</div></pre></td></tr></table></figure></p>
<p>当 pivot 不存在于列表 key 时，不执行任何操作。<br>当 key 不存在时， key 被视为空列表，不执行任何操作。<br>如果 key 不是列表类型，返回一个错误。</p>
<h4 id="LREM命令-移除元素"><a href="#LREM命令-移除元素" class="headerlink" title="LREM命令 - 移除元素"></a>LREM命令 - 移除元素</h4><p>在redis中，移除列表元素使用LREM命令，根据参数 count 的值，移除列表中与参数 value 相等的元素<br>基本语法：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LREM <span class="built_in">key</span> <span class="built_in">count</span> <span class="built_in">value</span></div></pre></td></tr></table></figure></p>
<p>示例 - 移除languages中，所有的名叫‘JS’的元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;  <span class="selector-tag">LREM</span> <span class="selector-tag">languages</span> 0 "<span class="selector-tag">JS</span>"</div><div class="line">(<span class="selector-tag">integer</span>) 1</div></pre></td></tr></table></figure></p>
<p>count 的值可以是以下几种：<br>count &gt; 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。<br>count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。<br>count = 0 : 移除表中所有与 value 相等的值。</p>
<h4 id="LEN命令-列表长度"><a href="#LEN命令-列表长度" class="headerlink" title="LEN命令 - 列表长度"></a>LEN命令 - 列表长度</h4><p>在redis中，LLEN命令可以获取到列表的长度，基本语法：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">LLEN key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 查看languages列表长度。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">LLEN</span> <span class="selector-tag">languages</span></div><div class="line">(<span class="selector-tag">integer</span>) 2</div></pre></td></tr></table></figure></p>
<p>返回列表 key 的长度。<br>如果 key 不存在，则 key 被解释为一个空列表，返回 0 。<br>如果 key 不是列表类型，返回一个错误。</p>
<h4 id="LTRIM命令-剪切列表"><a href="#LTRIM命令-剪切列表" class="headerlink" title="LTRIM命令 - 剪切列表"></a>LTRIM命令 - 剪切列表</h4><p>LTRIM可以对一个列表进行修剪，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除<br>基本语法：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LTRIM key <span class="literal">start</span> <span class="literal">stop</span></div></pre></td></tr></table></figure></p>
<p>示例 - 只保留列表 languages 的前2个元素，其余元素全部删除。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">LTRIM</span> <span class="selector-tag">languages</span> 0 1</div><div class="line"><span class="selector-tag">OK</span></div></pre></td></tr></table></figure></p>
<p>下标(index)参数start和stop都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。<br>你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</p>
<h3 id="集合-Set-操作命令"><a href="#集合-Set-操作命令" class="headerlink" title="集合(Set)操作命令"></a>集合(Set)操作命令</h3><p>Redis 集合（Set）是一个无序的字符串集合. 。Redis 集合拥有令人满意的不允许包含相同成员的属性。多次添加相同的元素，最终在集合里只会有一个元素。 实际上说这些就是意味着在添加元素的时候无须检测元素是否存在。 一个Redis集合的非常有趣的事情是他支持一些服务端的命令从现有的集合出发去进行集合运算，因此你可以在非常短的时间内进行合并（unions）, 求交集（intersections）,求差集（differences of sets）。</p>
<h4 id="SADD命令-添加"><a href="#SADD命令-添加" class="headerlink" title="SADD命令 - 添加"></a>SADD命令 - 添加</h4><p>集合操作中，SADD命令可以将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略<br>基本语法：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SADD <span class="built_in">key</span> <span class="built_in">member</span> [<span class="built_in">member</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例 - 添加‘Tom’到room集合中。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SADD</span> <span class="selector-tag">room</span> "<span class="selector-tag">Tom</span>"</div><div class="line">(<span class="selector-tag">integer</span>) 1</div></pre></td></tr></table></figure></p>
<p>假如 key 不存在，则创建一个只包含 member 元素作成员的集合。<br>当 key 不是集合类型时，返回一个错误。</p>
<h4 id="SPOP命令-随机取出"><a href="#SPOP命令-随机取出" class="headerlink" title="SPOP命令 - 随机取出"></a>SPOP命令 - 随机取出</h4><p>如果我们需要随机取出集合中的某个元素，可以使用SPOP命令<br>基本语法：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">SPOP key</span></div></pre></td></tr></table></figure></p>
<p>示例:随机取出room集合中的元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SPOP</span> <span class="selector-tag">room</span></div><div class="line">"<span class="selector-tag">Tom</span>"</div></pre></td></tr></table></figure></p>
<p>需要注意的是，执行SPOP命令返回的元素将被<strong>移除</strong>该集合。</p>
<h4 id="SMEMBERS命令-获取全部元素"><a href="#SMEMBERS命令-获取全部元素" class="headerlink" title="SMEMBERS命令 - 获取全部元素"></a>SMEMBERS命令 - 获取全部元素</h4><p>如果要获取集合中全部的元素，则需要使用SMEMBERS命令<br>基本语法：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">SMEMBERS key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 获取room集合中全部的元素。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SMEMBERS</span> <span class="selector-tag">room</span></div><div class="line">(<span class="selector-tag">empty</span> <span class="selector-tag">list</span> <span class="selector-tag">or</span> <span class="selector-tag">set</span>)</div></pre></td></tr></table></figure></p>
<p>SMEMBERS命令只会返回集合中的全部成员，并不会移除它们，如果集合不存在，则视为空集合。</p>
<h4 id="SCARD命令-元素数量"><a href="#SCARD命令-元素数量" class="headerlink" title="SCARD命令 - 元素数量"></a>SCARD命令 - 元素数量</h4><p>如果想要查看集合中元素的数量，可以使用SCARD命令<br>基本语法：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">SCARD key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 查看room集合中元素的数量。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SCARD</span> <span class="selector-tag">room</span></div><div class="line">(<span class="selector-tag">integer</span>) 0</div></pre></td></tr></table></figure></p>
<p>执行SCARD命令，当集合存在时，返回集合中元素的数量，若集合不存在，则返回0。</p>
<h4 id="SDIFF命令-差集"><a href="#SDIFF命令-差集" class="headerlink" title="SDIFF命令 - 差集"></a>SDIFF命令 - 差集</h4><p>假如现在有两个集合，我们想要获取到它们之间不同的元素，通常情况下，我们需要通过循环集合来比较，然后取得不同的元素。<br>在redis里面取得集合的差集非常简单，通过SDIFF命令即可轻松实现<br>基本语法：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SDIFF <span class="built_in">key</span> [<span class="built_in">key</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例 - 取得room1和room2的差集。<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0.</span><span class="number">0.1</span>:<span class="number">6379</span>&gt; SADD roo<span class="name">m1</span> <span class="string">"Tom"</span> <span class="string">"Jack"</span> </div><div class="line"><span class="comment">(integer)</span> <span class="number">2</span></div><div class="line"><span class="number">127.0.</span><span class="number">0.1</span>:<span class="number">6379</span>&gt; SADD roo<span class="name">m2</span> <span class="string">"jaakzhang"</span> <span class="string">"Tom"</span></div><div class="line"><span class="comment">(integer)</span> <span class="number">2</span></div><div class="line"><span class="number">127.0.</span><span class="number">0.1</span>:<span class="number">6379</span>&gt; SDIFF roo<span class="name">m1</span> roo<span class="name">m2</span> </div><div class="line"><span class="attr">#这里room1</span>在前 返回的结果以roo<span class="name">m1</span>为主体 从roo<span class="name">m1</span>中去掉roo<span class="name">m2</span>中相同的元素</div><div class="line"><span class="number">1</span>) <span class="string">"Jack"</span></div><div class="line"><span class="number">127.0.</span><span class="number">0.1</span>:<span class="number">6379</span>&gt; SDIFF roo<span class="name">m2</span> roo<span class="name">m1</span> </div><div class="line"><span class="attr">#这里room2</span>在前 返回的结果以roo<span class="name">m2</span>为主体 从roo<span class="name">m2</span>中去掉roo<span class="name">m1</span>中相同的元素</div><div class="line"><span class="number">1</span>) <span class="string">"jaakzhang"</span></div></pre></td></tr></table></figure></p>
<p>如果 key 都存在，则返回一个集合的全部成员，该集合是所有给定集合之间的差集。<br>不存在的 key 被视为空集。</p>
<h4 id="SINTER命令-交集"><a href="#SINTER命令-交集" class="headerlink" title="SINTER命令 - 交集"></a>SINTER命令 - 交集</h4><p>在 redis 中获取集合的交集也是非常简单的，执行SINTER命令将返回集合的交集<br>基本语法：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SINTER <span class="built_in">key</span> [<span class="built_in">key</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例 - 获取集合room1和room2的交集。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;  <span class="selector-tag">SMEMBERS</span> <span class="selector-tag">room1</span></div><div class="line">1) "<span class="selector-tag">Jack</span>"</div><div class="line">2) "<span class="selector-tag">Tom</span>"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;  <span class="selector-tag">SMEMBERS</span> <span class="selector-tag">room2</span></div><div class="line">1) "<span class="selector-tag">jaakzhang</span>"</div><div class="line">2) "<span class="selector-tag">Tom</span>"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SINTER</span> <span class="selector-tag">room1</span> <span class="selector-tag">room2</span></div><div class="line">1) "<span class="selector-tag">Tom</span>"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SINTER</span> <span class="selector-tag">room2</span> <span class="selector-tag">room1</span></div><div class="line">1) "<span class="selector-tag">Tom</span>"</div></pre></td></tr></table></figure></p>
<p>当集合都存在时，将返回一个集合的全部成员，该集合是所有给定集合的交集。<br>不存在的集合被视为空集。因此，当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。</p>
<h4 id="SUNION命令-并集"><a href="#SUNION命令-并集" class="headerlink" title="SUNION命令 - 并集"></a>SUNION命令 - 并集</h4><p>既然有差集和交集运算，当然少不了并集，在 redis 中，执行SUNION命令将返回给定集合的并集<br>基本语法：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SUNION <span class="built_in">key</span> [<span class="built_in">key</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例：获取集合room1和room2的并集。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">127.0.0.1:6379&gt;</span>  SMEMBERS room1</div><div class="line"><span class="number">1</span>) <span class="string">"Jack"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Tom"</span></div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span>  SMEMBERS room2</div><div class="line"><span class="number">1</span>) <span class="string">"jaakzhang"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Tom"</span></div><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> SUNION room1 room2</div><div class="line"><span class="number">1</span>) <span class="string">"jaakzhang"</span></div><div class="line"><span class="number">2</span>) <span class="string">"Jack"</span></div><div class="line"><span class="number">3</span>) <span class="string">"Tom"</span></div></pre></td></tr></table></figure></p>
<p>如果给定的集合都存在，则返回一个集合的全部成员，该集合是所有给定集合的并集。<br>同样，不存在的集合被视为空集。</p>
<h4 id="SISMEMBER命令-包含判断"><a href="#SISMEMBER命令-包含判断" class="headerlink" title="SISMEMBER命令 - 包含判断"></a>SISMEMBER命令 - 包含判断</h4><p>如果要判断集合是否包含某个元素也不需要循环对比了，因为 redis 提供SISMEMBER命令可以实现这个功能<br>基本语法：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SISMEMBER <span class="built_in">key</span> <span class="built_in">member</span></div></pre></td></tr></table></figure></p>
<p>示例 - 判断 Tom 元素是否集合 room1 的成员。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SMEMBERS</span> <span class="selector-tag">room1</span></div><div class="line">1) "<span class="selector-tag">Jack</span>"</div><div class="line">2) "<span class="selector-tag">Tom</span>"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;  <span class="selector-tag">SISMEMBER</span> <span class="selector-tag">room1</span> "<span class="selector-tag">Tom</span>"</div><div class="line">(<span class="selector-tag">integer</span>) 1</div></pre></td></tr></table></figure></p>
<p>如果集合包含给定的元素，则返回1，反之则返回0。</p>
<h4 id="SMOVE命令-移动元素"><a href="#SMOVE命令-移动元素" class="headerlink" title="SMOVE命令 - 移动元素"></a>SMOVE命令 - 移动元素</h4><p>执行SMOVE可以移动元素<br>基本语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SMOVE <span class="built_in">source</span> destination member</div></pre></td></tr></table></figure></p>
<p>将 member 元素从 source 集合移动到 destination 集合。SMOVE是原子性操作，因此可以保证数据的一致性。</p>
<p>示例 - 将room1集合中的‘Jack’移动到‘room2’集合。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;  <span class="selector-tag">SMEMBERS</span> <span class="selector-tag">room1</span></div><div class="line">1) "<span class="selector-tag">Jack</span>"</div><div class="line">2) "<span class="selector-tag">Tom</span>"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;  <span class="selector-tag">SMEMBERS</span> <span class="selector-tag">room2</span></div><div class="line">1) "<span class="selector-tag">jaakzhang</span>"</div><div class="line">2) "<span class="selector-tag">Tom</span>"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SMOVE</span> <span class="selector-tag">room1</span> <span class="selector-tag">room2</span> "<span class="selector-tag">Jack</span>"</div><div class="line">(<span class="selector-tag">integer</span>) 1</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;  <span class="selector-tag">SMEMBERS</span> <span class="selector-tag">room2</span></div><div class="line">1) "<span class="selector-tag">Jack</span>"</div><div class="line">2) "<span class="selector-tag">jaakzhang</span>"</div><div class="line">3) "<span class="selector-tag">Tom</span>"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt;  <span class="selector-tag">SMEMBERS</span> <span class="selector-tag">room1</span></div><div class="line">1) "<span class="selector-tag">Tom</span>"</div></pre></td></tr></table></figure></p>
<p>如果 source 集合不存在或不包含指定的 member 元素，则SMOVE命令不执行任何操作，仅返回 0 。否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。<br>当 destination 集合已经包含 member 元素时，SMOVE命令只是简单地将 source 集合中的 member 元素删除。<br>当 source 或 destination 不是集合类型时，返回一个错误。</p>
<h4 id="SREM命令-移除元素"><a href="#SREM命令-移除元素" class="headerlink" title="SREM命令 - 移除元素"></a>SREM命令 - 移除元素</h4><p>执行命令SREM可以将元素从集合中移除<br>基本语法：<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SREM <span class="built_in">key</span> <span class="built_in">member</span> [<span class="built_in">member</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例 - 从room1集合中移除”Tom”</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SMEMBERS</span> <span class="selector-tag">room1</span></div><div class="line">1) "<span class="selector-tag">Tom</span>"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SREM</span> <span class="selector-tag">room1</span> "<span class="selector-tag">Tom</span>"</div><div class="line">(<span class="selector-tag">integer</span>) 1</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SMEMBERS</span> <span class="selector-tag">room1</span></div><div class="line">(<span class="selector-tag">empty</span> <span class="selector-tag">list</span> <span class="selector-tag">or</span> <span class="selector-tag">set</span>)</div></pre></td></tr></table></figure>
<p>移除集合 key 中的一个或多个 member 元素，不存在的 member 元素会被忽略。<br>当 key 不是集合类型，返回一个错误。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;列表-Lists-操作命令&quot;&gt;&lt;a href=&quot;#列表-Lists-操作命令&quot; class=&quot;headerlink&quot; title=&quot;列表(Lists)操作命令&quot;&gt;&lt;/a&gt;列表(Lists)操作命令&lt;/h4&gt;&lt;p&gt;　　Redis列表是简单的字符串列表，按照插入顺序排序。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://zhangyake.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="http://zhangyake.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis 命令学习(一)</title>
    <link href="http://zhangyake.github.io/2015/11/24/redis01/"/>
    <id>http://zhangyake.github.io/2015/11/24/redis01/</id>
    <published>2015-11-24T12:11:07.000Z</published>
    <updated>2017-07-26T04:42:48.110Z</updated>
    
    <content type="html"><![CDATA[<h4 id="String操作命令"><a href="#String操作命令" class="headerlink" title="String操作命令"></a>String操作命令</h4><p>String 是 redis 中最基础的数据类型， redis 字符串是二进制安全的，这意味着他们有一个已知的长度没有任何特殊字符终止，所以你可以存储任何东西，512兆为上限。<br><a id="more"></a></p>
<h4 id="SET命令-添加键值"><a href="#SET命令-添加键值" class="headerlink" title="SET命令  - 添加键值"></a>SET命令  - 添加键值</h4><p>SET命令是将字符串值 value 关联到 key 。</p>
<p>语法格式：<br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SET key value <span class="string">[EX seconds]</span> <span class="string">[PX milliseconds]</span> <span class="string">[NX|XX]</span></div></pre></td></tr></table></figure></p>
<p> 如果 key 已经持有其他值，SET就覆写旧值，无视类型。因此，对于某个原本带有生存时间（TTL）的键来说， 当SET命令成功在这个键上执行时， 这个键原有的 TTL 将被清除。<br>示例：添加键key1，值为”test”<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SET</span> <span class="selector-tag">key1</span> "<span class="selector-tag">test</span>"</div><div class="line"><span class="selector-tag">OK</span></div></pre></td></tr></table></figure></p>
<h4 id="SETEX命令-添加值和生存时间"><a href="#SETEX命令-添加值和生存时间" class="headerlink" title="SETEX命令  - 添加值和生存时间"></a>SETEX命令  - 添加值和生存时间</h4><p>　　SETEX命令的作用是将值 value 关联到 key ，并将 key 的生存时间设为 seconds (以秒为单位)。如果 key 已经存在， SETEX命令将覆写旧值<br>语法格式：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SETEX key <span class="built_in">seconds</span> <span class="built_in">value</span></div></pre></td></tr></table></figure></p>
<p>示例 - 设置name的值为‘jaak’，生存时间为60秒。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SETEX</span> <span class="selector-tag">name</span> 60 "<span class="selector-tag">jaak</span>"</div><div class="line"><span class="selector-tag">OK</span></div></pre></td></tr></table></figure></p>
<p>SETEX命令的作用类似如下两个命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> <span class="keyword">name</span> <span class="string">"jaak"</span></div><div class="line"><span class="keyword">EXPIRE</span> <span class="keyword">name</span> <span class="number">60</span>  # 设置生存时间</div></pre></td></tr></table></figure></p>
<p>不同之处是，SETEX是一个原子性(atomic)操作， 关联值 和 设置生存时间 两个动作会在同一时间内完成，该命令在 Redis 用作缓存时，非常实用。</p>
<h4 id="GET命令-获取字符串"><a href="#GET命令-获取字符串" class="headerlink" title="GET命令 - 获取字符串"></a>GET命令 - 获取字符串</h4><p>　　GET命令是返回 key 所关联的字符串值。如果 key 不存在那么返回特殊值 nil 。假如 key 储存的值不是字符串类型，返回一个错误，因为GET只能用于处理字符串值<br>语法格式：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="builtin-name">GET</span> key</div></pre></td></tr></table></figure></p>
<p>示例 - 获取name和key的值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">GET</span> <span class="selector-tag">name</span></div><div class="line">"<span class="selector-tag">jaak</span>"</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">GET</span> <span class="selector-tag">key</span></div><div class="line">(<span class="selector-tag">nil</span>)</div><div class="line">返回值</div></pre></td></tr></table></figure></p>
<p>当key不存在时，返回nil，否则返回key的值。<br>如果key的值不是字符串类型，那么将会返回一个错误。</p>
<h4 id="APPEND命令-追加字符串"><a href="#APPEND命令-追加字符串" class="headerlink" title="APPEND命令 - 追加字符串"></a>APPEND命令 - 追加字符串</h4><p>如果 key 已经存在并且是一个字符串，APPEND命令将 value 追加到 key 原来的值的末尾，<br>语法格式：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">APPEND <span class="built_in">key</span> <span class="built_in">value</span></div></pre></td></tr></table></figure></p>
<p>示例 - 向name追加字符‘ zhang’。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">APPEND</span> <span class="selector-tag">name</span> " <span class="selector-tag">zhang</span>"    # 对已存在的字符串进行 <span class="selector-tag">APPEND</span></div><div class="line">(<span class="selector-tag">integer</span>) 10</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">GET</span> <span class="selector-tag">name</span></div><div class="line">“<span class="selector-tag">jaak</span> <span class="selector-tag">zhang</span>"</div></pre></td></tr></table></figure>
<p>如果 key 不存在，APPEND就简单地将给定 key 设为 value ，就像执行 SET key value 一样。</p>
<h4 id="MSET命令-添加多个键值"><a href="#MSET命令-添加多个键值" class="headerlink" title="MSET命令 - 添加多个键值"></a>MSET命令 - 添加多个键值</h4><p>　　MSET命令可以同时设置一个或多个 key-value 对，如果某个给定 key 已经存在，那么MSET会用新值覆盖原来的旧值<br>语法格式：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MSET <span class="built_in">key</span> <span class="built_in">value</span> [<span class="built_in">key</span> <span class="built_in">value</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例 - 设置name、age和number的值。</p>
<p>127.0.0.1:6379&gt; MSET name “jaak” age “24” number “158234232”<br>OK<br>MSET是一个原子性(atomic)操作，所有给定 key 都会在同一时间内被设置，某些给定 key 被更新而另一些给定 key 没有改变的情况，不可能发生。</p>
<h4 id="MGET命令-获取多个键值"><a href="#MGET命令-获取多个键值" class="headerlink" title="MGET命令 - 获取多个键值"></a>MGET命令 - 获取多个键值</h4><p>执行MGET命令，将返回所有(一个或多个)给定 key 的值<br>语法格式：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MGET <span class="built_in">key</span> [<span class="built_in">key</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例 - 获取name、age、number  、sex的值。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> MGET name age number  sex</div><div class="line"><span class="number">1</span>) <span class="string">"jaak"</span></div><div class="line"><span class="number">2</span>) <span class="string">"24"</span></div><div class="line"><span class="number">3</span>) <span class="string">"158234232"</span></div><div class="line"><span class="number">4</span>) (<span class="literal">nil</span>)</div></pre></td></tr></table></figure></p>
<p>如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。因此，该命令永不失败。</p>
<h4 id="SETRANGE命令-覆写"><a href="#SETRANGE命令-覆写" class="headerlink" title="SETRANGE命令 - 覆写"></a>SETRANGE命令 - 覆写</h4><p>SETRANGE命令是用 value 参数覆写(overwrite)给定 key 所储存的字符串值，从偏移量offset开始。<br>不存在的 key 当作空白字符串处理,语法格式：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SETRANGE key <span class="built_in">offset</span> <span class="built_in">value</span></div></pre></td></tr></table></figure></p>
<p>示例 - 覆写name的值。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SET</span> <span class="selector-tag">name</span> "<span class="selector-tag">jaak</span>"</div><div class="line"><span class="selector-tag">OK</span></div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">SETRANGE</span> <span class="selector-tag">name</span> 4 "<span class="selector-tag">zhang</span>"</div><div class="line">(<span class="selector-tag">integer</span>) 11</div><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">GET</span> <span class="selector-tag">name</span></div><div class="line">"<span class="selector-tag">jaakzhang</span>"</div></pre></td></tr></table></figure>
<p>SETRANGE命令会确保字符串足够长以便将 value 设置在指定的偏移量上，如果给定 key 原来储存的字符串长度比偏移量小(比如字符串只有 5 个字符长，但你设置的 offset 是 10 )，那么原字符和偏移量之间的空白将用零字节(zerobytes, “\x00” )来填充。<br>注意你能使用的最大偏移量是 2^29-1(536870911) ，因为 Redis 字符串的大小被限制在 512 兆(megabytes)以内。如果你需要使用比这更大的空间，你可以使用多个 key 。</p>
<h4 id="STRLEN命令-获取键值长度"><a href="#STRLEN命令-获取键值长度" class="headerlink" title="STRLEN命令 - 获取键值长度"></a>STRLEN命令 - 获取键值长度</h4><p>STRLEN命令将会返回 key 所储存的字符串值的长度<br>语法格式：<br><figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">STRLEN</span> <span class="built_in">key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 获取name值的长度。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">STRLEN</span> <span class="selector-tag">name</span></div><div class="line">(<span class="selector-tag">integer</span>) 9</div></pre></td></tr></table></figure></p>
<p>值得注意的是当 key 储存的不是字符串值时，返回一个错误。</p>
<h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><p>除了前面提到的那些常用命令以外，还有很多其他的命令，真正用到的时候再来详细了解如何使用它。</p>
<p><strong>命令</strong>              　　　　　　　　　<strong>用途</strong><br><strong>GETSET</strong>  <em>设置键的字符串值，并返回旧值。</em><br><strong>GETRANGE</strong>    <em>得到字符串的子字符串存放在一个键。</em><br><strong>GETBIT</strong>  <em>对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</em><br><strong>SETBIT</strong>  <em>对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</em><br><strong>SETNX</strong>   <em>将 key 的值设为 value ，当且仅当 key 不存在。</em><br><strong>MSETNX</strong>  <em>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</em><br><strong>PSETEX</strong>  <em>和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</em><br><strong>INCR</strong>    <em>将 key 中储存的数字值增一。</em><br><strong>INCRBY</strong>  <em>将 key 所储存的值加上指定增量。</em><br><strong>INCRBYFLOAT</strong> <em>为 key 中所储存的值加上指定浮点数增量。</em><br><strong>DECR</strong>    <em>将 key 中储存的数字值减一。</em><br><strong>DECRBY</strong>  <em>将 key 所储存的值加上指定增量。</em></p>
<h3 id="哈希（Hash）操作命令"><a href="#哈希（Hash）操作命令" class="headerlink" title="哈希（Hash）操作命令"></a>哈希（Hash）操作命令</h3><p>Redis Hashes是字符串字段和字符串值之间的映射,因此他们是展现对象的完美数据类型。</p>
<h4 id="HSET命令-添加键值"><a href="#HSET命令-添加键值" class="headerlink" title="HSET命令 - 添加键值"></a>HSET命令 - 添加键值</h4><p>　　在 redis 中，使用HSET命令来将哈希表 key 中的域 field 的值设为 value<br>语法如下：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HSET <span class="built_in">key</span> field <span class="built_in">value</span></div></pre></td></tr></table></figure></p>
<p>示例 - 添加键name ，值为‘jaak zhang’。<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HSET man <span class="built_in">name</span> <span class="string">"jaak zhang"</span> <span class="comment"># 设置一个新域</span></div><div class="line">(<span class="built_in">integer</span>) <span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>如果 key 不存在，一个新的哈希表被创建并进行HSET操作。<br>如果域 field 已经存在于哈希表中，旧值将被覆盖。</p>
<h4 id="HMSET命令-添加多个值"><a href="#HMSET命令-添加多个值" class="headerlink" title="HMSET命令 - 添加多个值"></a>HMSET命令 - 添加多个值</h4><p>除了HSET命令，HMSET命令的用途也是用来设置值，不同的是，HMSET一次可以设置多个 field-value (域-值)对设置到哈希表 key 中,语法如下：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HMSET <span class="built_in">key</span> field <span class="built_in">value</span> [field <span class="built_in">value</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例 - 添加键age、sex。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">HMSET</span> <span class="selector-tag">man</span> <span class="selector-tag">age</span> "24" <span class="selector-tag">sex</span> "男"</div><div class="line"><span class="selector-tag">OK</span></div></pre></td></tr></table></figure></p>
<p>如果 key 不存在，将会创建一个空的哈希表并执行HMSET操作。<br>如果添加的域已存在哈希表中，那么它将被覆盖。</p>
<h4 id="HGET命令-获取值"><a href="#HGET命令-获取值" class="headerlink" title="HGET命令 - 获取值"></a>HGET命令 - 获取值</h4><p>127.0.0.1:6379 中如何获取key的值呢？HGET是用来获取指定 key 值的命令，语法如下:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">HGET</span> key <span class="meta">field</span></div></pre></td></tr></table></figure></p>
<p>示例 - 获取域name的值。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">HGET</span> <span class="selector-tag">man</span> <span class="selector-tag">name</span></div><div class="line">"<span class="selector-tag">jaak</span> <span class="selector-tag">zhang</span>"</div></pre></td></tr></table></figure></p>
<p>执行HGET命令，如果 key 存在，将返回哈希表 key 中给定域 field 的值，如果 key 不存在，则返回 (nil) 。</p>
<h4 id="HMGET命令-获取多个值"><a href="#HMGET命令-获取多个值" class="headerlink" title="HMGET命令 - 获取多个值"></a>HMGET命令 - 获取多个值</h4><p>作为HMSET命令对应的获取命令，HMGET可以一次性获取哈希表 key 中，一个或多个给定域的值<br>基本语法：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">HMGET</span> key <span class="meta">field</span> [<span class="meta">field</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例 - 获取域name、age、sex的值。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> HMGET man  name age sex             </div><div class="line"><span class="comment"># 返回值的顺序和传入参数的顺序一样</span></div><div class="line"><span class="number">1</span>) <span class="string">"jaak zhang"</span></div><div class="line"><span class="number">2</span>) <span class="string">"24"</span></div><div class="line"><span class="number">3</span>) <span class="string">"\xe7\x94\xb7"</span></div></pre></td></tr></table></figure></p>
<p>如果给定的域不存在于哈希表，那么返回一个 nil 值。<br>因为不存在的 key 被当作一个空哈希表来处理，所以对一个不存在的 key 进行HMGET操作将返回一个只带有 nil 值的表。</p>
<h4 id="HGETALL命令-获取全部值"><a href="#HGETALL命令-获取全部值" class="headerlink" title="HGETALL命令 - 获取全部值"></a>HGETALL命令 - 获取全部值</h4><p>如果我们想要一次性获取全部域的值，很显然 HGET 和 HMGET 都是不合适的，所幸的是我们还有HGETALL命令，通过它，我们可以轻松的获取到全部域值，<br>基本语法：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">HGETALL key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 获取man全部域的值。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">127.0.0.1:6379&gt;</span>HGETALL man</div><div class="line"><span class="number">1</span>) <span class="string">"name"</span>   <span class="comment">#域</span></div><div class="line"><span class="number">2</span>) <span class="string">"jaak zhang"</span> <span class="comment">#值</span></div><div class="line"><span class="number">3</span>) <span class="string">"age"</span></div><div class="line"><span class="number">4</span>) <span class="string">"24"</span></div><div class="line"><span class="number">5</span>) <span class="string">"sex"</span></div><div class="line"><span class="number">6</span>) <span class="string">"\xe7\x94\xb7"</span></div></pre></td></tr></table></figure></p>
<p>在返回值里，紧跟每个域名(field name)之后是域的值(value)，所以返回值的长度是哈希表大小的两倍。</p>
<h4 id="HEXISTS命令-验证存在"><a href="#HEXISTS命令-验证存在" class="headerlink" title="HEXISTS命令 -  验证存在"></a>HEXISTS命令 -  验证存在</h4><p>在应用环境中，我们经常会需要知道一个 key 中是否存在某个 field ，HEXISTS命令可以帮助我们达到这个目的<br>基本语法：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">HEXISTS</span> key <span class="meta">field</span></div></pre></td></tr></table></figure></p>
<p>示例 - 验证键number是否存在。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">HEXISTS</span> <span class="selector-tag">man</span> <span class="selector-tag">number</span> </div><div class="line">(<span class="selector-tag">integer</span>) 0</div></pre></td></tr></table></figure></p>
<p>查看哈希表 key 中，给定域 field 是否存在。<br>如果哈希表含有给定域，返回 1 。<br>如果哈希表不含有给定域，或 key 不存在，返回 0 。</p>
<h4 id="HKEYS命令-获取所有key"><a href="#HKEYS命令-获取所有key" class="headerlink" title="HKEYS命令 - 获取所有key"></a>HKEYS命令 - 获取所有key</h4><p>我们经常会遇见这样的应用场景，比如在线用户列表、课堂列表等等，这时候我们可以使用HKEYS来获取哈希表 key 中的所有域<br>基本语法：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">HKEYS key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 查看键man中所有的域。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">127.0.0.1:6379&gt;</span> HKEYS man</div><div class="line"><span class="number">1</span>) <span class="string">"name"</span></div><div class="line"><span class="number">2</span>) <span class="string">"age"</span></div><div class="line"><span class="number">3</span>) <span class="string">"sex"</span></div></pre></td></tr></table></figure></p>
<p>当 key 存在时，将返回一个包含哈希表中所有域的表。 当 key 不存在时，返回一个空表。</p>
<h4 id="HLEN命令-获取域数量"><a href="#HLEN命令-获取域数量" class="headerlink" title="HLEN命令 - 获取域数量"></a>HLEN命令 - 获取域数量</h4><p>HLEN命令将返回哈希表 key 中域的数量,什么时候会用到它呢？比如：在线聊天室，显示在线用户数<br>基本语法：<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">HLEN key</span></div></pre></td></tr></table></figure></p>
<p>示例 - 查看man键中域的个数。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">HLEN</span> <span class="selector-tag">man</span></div><div class="line">(<span class="selector-tag">integer</span>) 3</div></pre></td></tr></table></figure></p>
<p>当 key 存在时，将返回哈希表中域的数量。 当 key 不存在时，返回 0 。</p>
<h4 id="HDEL命令-删除"><a href="#HDEL命令-删除" class="headerlink" title="HDEL命令 - 删除"></a>HDEL命令 - 删除</h4><p>有添加就必定有删除的需求，当我们想要删除哈希表 key 中的一个或多个指定域时，可以使用HDEL命令<br>基本语法：<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">HDEL</span> key <span class="meta">field</span> [<span class="meta">field</span> ...]</div></pre></td></tr></table></figure></p>
<p>示例 - 删除键man中的sex域。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:6379</span>&gt; <span class="selector-tag">HDEL</span> <span class="selector-tag">man</span> <span class="selector-tag">sex</span></div><div class="line">(<span class="selector-tag">integer</span>) 1</div></pre></td></tr></table></figure></p>
<p>如果是不存在的域，那么它将被忽略掉。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;String操作命令&quot;&gt;&lt;a href=&quot;#String操作命令&quot; class=&quot;headerlink&quot; title=&quot;String操作命令&quot;&gt;&lt;/a&gt;String操作命令&lt;/h4&gt;&lt;p&gt;String 是 redis 中最基础的数据类型， redis 字符串是二进制安全的，这意味着他们有一个已知的长度没有任何特殊字符终止，所以你可以存储任何东西，512兆为上限。&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://zhangyake.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="redis" scheme="http://zhangyake.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mongoose简单总结</title>
    <link href="http://zhangyake.github.io/2015/11/16/mongoose01/"/>
    <id>http://zhangyake.github.io/2015/11/16/mongoose01/</id>
    <published>2015-11-16T02:25:40.000Z</published>
    <updated>2017-07-26T04:42:48.030Z</updated>
    
    <content type="html"><![CDATA[<p>工作一年多了,一直再用node.js和PHP写后端. node.js写后端 数据库用mongodb ,第三方数据库操作模块就用的mongoose,在此总结一下mongoose的基本使用</p>
<h4 id="Mongoose是什么"><a href="#Mongoose是什么" class="headerlink" title="Mongoose是什么"></a>Mongoose是什么</h4><p>Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。<br><a id="more"></a></p>
<h4 id="Mongoose能做什么"><a href="#Mongoose能做什么" class="headerlink" title="Mongoose能做什么"></a>Mongoose能做什么</h4><p>Mongoose，因为封装了对MongoDB对文档操作的常用处理方法，让NodeJS操作Mongodb数据库变得easy、easy、So easy!</p>
<h4 id="Mongoose使用"><a href="#Mongoose使用" class="headerlink" title="Mongoose使用"></a>Mongoose使用</h4><h5 id="安装mongoose"><a href="#安装mongoose" class="headerlink" title="安装mongoose"></a>安装mongoose</h5><pre><code>npm install mongoose
</code></pre><h5 id="引用mongoose"><a href="#引用mongoose" class="headerlink" title="引用mongoose"></a>引用mongoose</h5><pre><code>var mongoose = require(&quot;mongoose&quot;);
</code></pre><h5 id="使用”mongoose”连接数据库"><a href="#使用”mongoose”连接数据库" class="headerlink" title="使用”mongoose”连接数据库"></a>使用”mongoose”连接数据库</h5><pre><code>var db = mongoose.connect(&quot;mongodb://user:pass@localhost:port/database&quot;); 
</code></pre><p>执行下面代码检查默认数据库test，是否可以正常连接成功</p>
<pre><code>var mongoose = require(&quot;mongoose&quot;);
var db = mongoose.connect(&quot;mongodb://127.0.0.1:27017/test&quot;);
db.connection.on(&quot;error&quot;, function (error) {
console.log(&quot;数据库连接失败：&quot; + error);
});
db.connection.on(&quot;open&quot;, function () {
console.log(&quot;------数据库连接成功！------&quot;);
}); 
</code></pre><h4 id="名词解释-Schema-Model-Entity"><a href="#名词解释-Schema-Model-Entity" class="headerlink" title="名词解释 Schema,Model,Entity"></a>名词解释 Schema,Model,Entity</h4><p><strong>Schema</strong> —— 一种以文件形式存储的数据库模型骨架，无法直接通往数据库端，也就是说它不具备对数据库的操作能力，仅仅只是数据库模型在程序片段中的一种表现，可以说是数据属性模型(传统意义的表结构)，又或着是“集合”的模型骨架。<br>那如何去定义一个Schema，请看示例：</p>
<pre><code>var mongoose = require(&quot;mongoose&quot;);
var TestSchema = new mongoose.Schema({
          name : { type:String },//属性name,类型为String
          age  : { type:Number, default:0 },//属性age,类型为Number,默认为0
          time : { type:Date, default:Date.now },
          email: { type:String,default:&apos;&apos;}
    });
</code></pre><p><strong>Model</strong> —— 由Schema构造生成的模型，除了Schema定义的数据库骨架以外，还具有数据库操作的行为，类似于管理数据库属性、行为的类。<br>通过Schema来创建Model，如下示例：</p>
<pre><code>var db = mongoose.connect(&quot;mongodb://127.0.0.1:27017/test&quot;);
    //……
   // 创建Model
var TestModel = db.model(&quot;test1&quot;, TestSchema);
</code></pre><p>拥有了Model，在后面就可以使用Model来进行增删改查的具体操作。</p>
<pre><code>var TestSchema = new mongoose.Schema({
       name : { type:String },//属性name,类型为String
       age  : { type:Number, default:0 },//属性age,类型为Number,默认为0
       time : { type:Date, default:Date.now },
        email: { type:String,default:&apos;&apos;}
  });
var TestModel = db.model(&quot;test1&quot;, TestSchema);
</code></pre><p><strong>Entity</strong> —— 由Model创建的实体，使用save方法保存数据，Model和  Entity都有能影响数据库的操作，但Model比Entity更具操作性。<br>使用Model创建Entity，如下示例：</p>
<pre><code>var TestEntity = new TestModel({
       name : &quot;jaak&quot;,
       age  : 25,
       email: &quot;jaak@qq.com&quot;
});
console.log(TestEntity.name); // jaak
console.log(TestEntity.age); // 25
</code></pre><h4 id="Schema-Model-Entity-完整示例"><a href="#Schema-Model-Entity-完整示例" class="headerlink" title="Schema Model Entity 完整示例"></a>Schema Model Entity 完整示例</h4><pre><code>var mongoose = require(&quot;mongoose&quot;);
var db = mongoose.connect(&quot;mongodb://127.0.0.1:27017/test&quot;);
var TestSchema = new mongoose.Schema({
    name : { type:String },
    age  : { type:Number, default:0 },
    email: { type:String },
    time : { type:Date, default:Date.now }
});
var TestModel = db.model(&quot;test1&quot;, TestSchema );
var TestEntity = new TestModel({
    name : &quot;helloworld&quot;,
    age  : 28,
    email: &quot;helloworld@qq.com&quot;
});
TestEntity.save(function(error,doc){
  if(error){
     console.log(&quot;error :&quot; + error);
  }else{
     console.log(doc);
  }
});
</code></pre><ul>
<li>Schema：数据库集合的模型骨架，或者是数据属性模型传统意义的表结构。</li>
<li>Model ：通过Schema构造而成，除了具有Schema定义的数据库骨架以外，还可以具体的操作数据库。</li>
<li>Entity：通过Model创建的实体，它也可以操作数据库。<br>Schema、Model、Entity的关系请牢记，Schema生成Model，Model创造Entity，Model和Entity都可对数据库操作造成影响，但Model比Entity更具操作性</li>
</ul>
<h4 id="Model-基本的find查询"><a href="#Model-基本的find查询" class="headerlink" title="Model 基本的find查询"></a>Model 基本的find查询</h4><p>使用Model进行基本的find查询： Model.find(查询条件,callback);</p>
<pre><code>Model.find({},function(error,docs){
    //若没有向find传递参数，默认的是显示所有文档
 });
Model.find({ &quot;age&quot;: 28 }, function (error, docs) {
   if(error){
     console.log(&quot;error :&quot; + error);
   }else{
     console.log(docs); //docs: age为28的所有文档
   }
 }); 
</code></pre><h4 id="Model-保存方法"><a href="#Model-保存方法" class="headerlink" title="Model 保存方法"></a>Model 保存方法</h4><p> 语法：Model.create(文档数据, callback))<br> 示例 :</p>
<pre><code>Model.create({ name:&quot;model_create&quot;, age:26}, function(error,doc){
       if(error) {
           console.log(error);
       } else {
           console.log(doc);
       }
   });
</code></pre><h4 id="Entity-保存方法"><a href="#Entity-保存方法" class="headerlink" title="Entity 保存方法"></a>Entity 保存方法</h4><p>语法 : Entity.save(文档数据, callback))<br>示例:</p>
<pre><code>var Entity = new Model({name:&quot;entity_save&quot;,age: 27});  
Entity.save(function(error,doc) {
    if(error) {
        console.log(error);
    } else {
        console.log(doc);
    }
});
</code></pre><h4 id="Model-数据更新"><a href="#Model-数据更新" class="headerlink" title="Model 数据更新"></a>Model 数据更新</h4><p>  语法 : Model.update(查询条件,更新对象,callback);<br>  示例:</p>
<pre><code>var conditions = {name : &apos;test_update&apos;};
var update = {$set : { age : 16 }};
Model.update(conditions, update, function(error){
    if(error) {
        console.log(error);
    } else {
        console.log(&apos;Update success!&apos;);
    }
});
</code></pre><h4 id="Model-删除数据"><a href="#Model-删除数据" class="headerlink" title="Model 删除数据"></a>Model 删除数据</h4><p>语法 : Model.remove(查询条件,callback);<br>示例:</p>
<pre><code>var conditions = { name: &apos;tom&apos; };
Model.remove(conditions, function(error){
    if(error) {
        console.log(error);
    } else {
        console.log(&apos;Delete success!&apos;);
    }
});
</code></pre><h4 id="Model-find过滤查询"><a href="#Model-find过滤查询" class="headerlink" title="Model find过滤查询"></a>Model find过滤查询</h4><p>语法 :  属性过滤 Model.find(Conditions,<em>field</em>,callback);<br><em>field</em> 说明：我们只需要把显示的属性设置为大于零的数就可以，当然1是最好理解的_id是默认返回 如果不要显示加上(“_id”:0)<br>但是 对其他不需要显示的属性且不是_id 如果设置为0的话将会抛异常或查询无果。<br>示例：<br>//返回只包含一个键值name、age的所有记录</p>
<pre><code>Model.find({},{name:1, age:1, _id:0}，function(err,docs){
   //docs 查询结果集
})
</code></pre><h4 id="Model-findOne的基本用法"><a href="#Model-findOne的基本用法" class="headerlink" title="Model findOne的基本用法"></a>Model findOne的基本用法</h4><p>与find相同，但只返回单个文档，也就说当查询到即一个符合条件的数据时，将停止继续查询，并返回查询结果。<br>单条数据查询语法: Model.findOne(Conditions,callback);</p>
<pre><code>Model.findOne({ age: 27}, function (err, doc){
    // 查询符合age等于27的第一条数据
    // doc是查询结果
 });
</code></pre><p>findOne方法，只返回第一个符合条件的文档数据。</p>
<h4 id="Model-findById的基本用法"><a href="#Model-findById的基本用法" class="headerlink" title="Model findById的基本用法"></a>Model findById的基本用法</h4><p>与findOne相同，但它只接收文档的_id作为参数，返回单个文档。<br>单条数据查询语法: Model.findById(_id, callback);</p>
<pre><code>TestModel.findById(&apos;_id&apos;, function (err, doc){
 //doc 查询结果文档
});
</code></pre><h4 id="Model-条件查询"><a href="#Model-条件查询" class="headerlink" title="Model 条件查询"></a>Model 条件查询</h4><pre><code>&quot;$lt&quot;(小于)，&quot;$lte&quot;(小于等于),&quot;$gt&quot;(大于)，&quot;$gte&quot;(大于等于)，&quot;$ne&quot;(不等于)，&quot;$in&quot;(可单值和多个值的匹配)，&quot;$or&quot;(查询多个键值的任意给定值)，&quot;$exists&quot;(表示是否存在的意思)&quot;$all&quot;
</code></pre><p><strong>使用$gt(&gt;)、$lt(&lt;)、$lte(&lt;=)、$gte(&gt;=)操作符进行排除性的查询，如下示例</strong></p>
<pre><code>Model.find({&quot;age&quot;:{&quot;$gt&quot;:18}},function(error,docs){
   //查询所有nage大于18的数据
});
Model.find({&quot;age&quot;:{&quot;$lt&quot;:60}},function(error,docs){
   //查询所有nage小于60的数据
});
Model.find({&quot;age&quot;:{&quot;$gt&quot;:18,&quot;$lt&quot;:60}},function(error,docs){
   //查询所有nage大于18小于60的数据
});
</code></pre><p><strong>$ne(!=)操作符的含义相当于不等于、不包含，查询时我们可通过它进行条件判定，具体使用方法如下</strong></p>
<pre><code>Model.find({ age:{ $ne:24}},function(error,docs){
    //查询age不等于24的所有数据
});
Model.find({name:{$ne:&quot;tom&quot;},age:{$gte:18}},function(error,docs){
  //查询name不等于tom、age&gt;=18的所有数据
});
</code></pre><p><strong>和$ne操作符相反，$in相当于包含、等于，查询时查找包含于指定字段条件的数据。具体使用方法如下</strong></p>
<pre><code>Model.find({ age:{ $in: 20}},function(error,docs){
   //查询age等于20的所有数据
}); 
Model.find({ age:{$in:[20,30]}},function(error,docs){
  //可以把多个值组织成一个数组
}); 
</code></pre><p><strong>$or操作符，可以查询多个键值的任意给定值，只要满足其中一个就可返回，用于存在多个条件判定的情况下使用，如下示例</strong></p>
<pre><code>Model.find({&quot;$or&quot;:[{&quot;name&quot;:&quot;yaya&quot;},{&quot;age&quot;:28}]},function(error,docs){
  //查询name为yaya或age为28的全部文档
});
</code></pre><p><strong>$exists操作符，可用于判断某些关键字段是否存在来进行条件查询。如下示例</strong></p>
<pre><code>Model.find({name: {$exists: true}},function(error,docs){
  //查询所有存在name属性的文档
});
Model.find({telephone: {$exists: false}},function(error,docs){
  //查询所有不存在telephone属性的文档
});
</code></pre><p><strong>limit的基本用法</strong><br>限制返回数量语法：Model.find(Conditions,fields,<strong>options</strong>,callback);<br>示例：</p>
<pre><code>Model.find({},null,**{limit:20}**,function(err,docs){
    console.log(docs);
});
</code></pre><p><strong>sort的基本用法</strong><br>对结果排序语法：Model.find(Conditions,fields,options,callback);<br>示例：</p>
<pre><code>Model.find({},null,{sort:{age:-1}},function(err,docs){
  //查询所有数据，并按照age降序顺序返回数据docs
});
</code></pre><p>sort函数可以将查询结果数据进行排序操作，该函数的参数是一个或多个键/值对，<br>键代表要排序的键名，值代表排序的方向，1是升序，-1是降序</p>
<p><strong>skip的基本用法</strong><br>跳过数量：find(Conditions,fields,<strong>options</strong>,callback);</p>
<pre><code>Model.find({},null,**{skip:4}**,function(err,docs){
    console.log(docs);
});
</code></pre><p>如果查询结果数量中少于4个的话，则不会返回任何结果。</p>
<p><strong>skip limit sort 联合查询 示例</strong></p>
<pre><code>Model.find({},null,{skip:0,limit:2,sort:{age:1}},function(err,docs){
 // ...
});
</code></pre><h4 id="链式查询"><a href="#链式查询" class="headerlink" title="链式查询"></a>链式查询</h4><p>这种方式相对直接查询，分的比较明细，如果不带 callback，则返回 query，<br>query 表示没有执行的预编译查询语句，该 query 对象执行的方法都将返回自己，<br>只有在执行 exec 方法时才执行查询，而且必须有回调。</p>
<pre><code>var query = Model
.find({ age: 24})
.limit(10)
.skip(5);
query.exec(function(err,docs){
  if(err){
     //...
    }else{ 
     console.log(docs);
    }
});
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作一年多了,一直再用node.js和PHP写后端. node.js写后端 数据库用mongodb ,第三方数据库操作模块就用的mongoose,在此总结一下mongoose的基本使用&lt;/p&gt;
&lt;h4 id=&quot;Mongoose是什么&quot;&gt;&lt;a href=&quot;#Mongoose是什么&quot; class=&quot;headerlink&quot; title=&quot;Mongoose是什么&quot;&gt;&lt;/a&gt;Mongoose是什么&lt;/h4&gt;&lt;p&gt;Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。&lt;br&gt;
    
    </summary>
    
      <category term="后端" scheme="http://zhangyake.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="mongoose" scheme="http://zhangyake.github.io/tags/mongoose/"/>
    
  </entry>
  
  <entry>
    <title>Hexo入住</title>
    <link href="http://zhangyake.github.io/2015/10/13/article01/"/>
    <id>http://zhangyake.github.io/2015/10/13/article01/</id>
    <published>2015-10-13T07:15:02.000Z</published>
    <updated>2017-07-26T04:42:48.025Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h4><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><a id="more"></a></p>
<h4 id="超快速度"><a href="#超快速度" class="headerlink" title="超快速度"></a>超快速度</h4><p>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染</p>
<h4 id="支持-Markdown"><a href="#支持-Markdown" class="headerlink" title="支持 Markdown"></a>支持 Markdown</h4><p>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。</p>
<h4 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h4><p>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站</p>
<h4 id="丰富的插件"><a href="#丰富的插件" class="headerlink" title="丰富的插件"></a>丰富的插件</h4><p>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p>
<p>如何使用？ Hexo官方网站: <a href="https://hexo.io/" target="_blank" rel="external">https://hexo.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;什么是-Hexo？&quot;&gt;&lt;a href=&quot;#什么是-Hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Hexo？&quot;&gt;&lt;/a&gt;什么是 Hexo？&lt;/h4&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;br&gt;
    
    </summary>
    
      <category term="工具" scheme="http://zhangyake.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Hexo" scheme="http://zhangyake.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
